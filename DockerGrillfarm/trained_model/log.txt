[06/09 07:55:25] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 07:55:26] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 07:55:26] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.WEIGHT_DECAY', '0.0001', 'SOLVER.WARMUP_ITERS', '300', 'SOLVER.CHECKPOINT_PERIOD', '500', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MOMENTUM', '0.9', 'SOLVER.MAX_ITER', '3500', 'TEST.EVAL_PERIOD', '50', 'SEED', '11', 'MODEL.ROI_HEADS.SCORE_THRESH_TEST', '0.05', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 07:55:26] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 07:55:26] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 11
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 300
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 50
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 07:55:27] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 07:55:39] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 07:55:39] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 07:56:09] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 07:56:09] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 07:56:09] d2.data.datasets.coco INFO: Loaded 150 images in COCO format from test_info/coco_instances.json
[06/09 07:56:09] d2.data.build INFO: Distribution of instances among all 8 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    moving     | 85           |   juvenile   | 91           | damaged_adu.. | 86           |
| damaged_adu.. | 102          | adult_female | 102          |  cannibalism  | 88           |
| egg_laying_.. | 90           |  adult_male  | 78           |               |              |
|     total     | 722          |              |              |               |              |[0m
[06/09 07:56:09] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[06/09 07:56:09] d2.data.common INFO: Serializing 150 elements to byte tensors and concatenating them all ...
[06/09 07:56:09] d2.data.common INFO: Serialized dataset takes 0.97 MiB
[06/09 07:56:09] d2.evaluation.evaluator INFO: Start inference on 150 images
[06/09 07:56:12] d2.evaluation.evaluator INFO: Inference done 11/150. 0.0798 s / img. ETA=0:00:25
[06/09 07:56:17] d2.evaluation.evaluator INFO: Inference done 39/150. 0.0797 s / img. ETA=0:00:20
[06/09 07:56:22] d2.evaluation.evaluator INFO: Inference done 67/150. 0.0801 s / img. ETA=0:00:15
[06/09 07:56:27] d2.evaluation.evaluator INFO: Inference done 95/150. 0.0801 s / img. ETA=0:00:10
[06/09 07:56:32] d2.evaluation.evaluator INFO: Inference done 123/150. 0.0800 s / img. ETA=0:00:04
[06/09 07:56:37] d2.evaluation.evaluator INFO: Inference done 150/150. 0.0816 s / img. ETA=0:00:00
[06/09 07:56:37] d2.evaluation.evaluator INFO: Total inference time: 0:00:26.654148 (0.183822 s / img per device, on 1 devices)
[06/09 07:56:37] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:11 (0.081609 s / img per device, on 1 devices)
[06/09 07:56:37] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[06/09 07:56:37] d2.evaluation.coco_evaluation INFO: Saving results to ./output/inference/acheta1_test/coco_instances_results.json
[06/09 07:56:37] d2.evaluation.coco_evaluation INFO: Evaluating predictions with unofficial COCO API...
[06/09 07:56:37] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *bbox*
[06/09 07:56:38] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.12 seconds.
[06/09 07:56:38] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 07:56:38] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.03 seconds.
[06/09 07:56:38] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.002 | 0.011  | 0.000  | 0.000 | 0.005 |  nan  |
[06/09 07:56:38] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 07:56:38] d2.evaluation.coco_evaluation INFO: Per-category bbox AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.000 | juvenile     | 0.000 | damaged_adult_male | 0.002 |
| damaged_adult_female | 0.000 | adult_female | 0.012 | cannibalism        | 0.000 |
| egg_laying_female    | 0.000 | adult_male   | 0.000 |                    |       |
[06/09 07:56:38] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *segm*
[06/09 07:56:38] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.26 seconds.
[06/09 07:56:39] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 07:56:39] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.04 seconds.
[06/09 07:56:39] d2.evaluation.coco_evaluation INFO: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.000 | 0.000  | 0.000  | 0.000 | 0.000 |  nan  |
[06/09 07:56:39] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 07:56:39] d2.evaluation.coco_evaluation INFO: Per-category segm AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.000 | juvenile     | 0.000 | damaged_adult_male | 0.000 |
| damaged_adult_female | 0.000 | adult_female | 0.000 | cannibalism        | 0.000 |
| egg_laying_female    | 0.000 | adult_male   | 0.000 |                    |       |
[06/09 07:56:39] detectron2 INFO: Evaluation results for acheta1_test in csv format:
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: Task: bbox
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: 0.0018,0.0114,0.0000,0.0000,0.0054,nan
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: Task: segm
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 07:56:39] d2.evaluation.testing INFO: copypaste: 0.0000,0.0000,0.0000,0.0000,0.0000,nan
[06/09 07:57:49] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 07:57:49] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 07:57:49] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.WEIGHT_DECAY', '0.0001', 'SOLVER.WARMUP_ITERS', '300', 'SOLVER.CHECKPOINT_PERIOD', '500', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MOMENTUM', '0.9', 'SOLVER.MAX_ITER', '3500', 'TEST.EVAL_PERIOD', '50', 'SEED', '11', 'MODEL.ROI_HEADS.SCORE_THRESH_TEST', '0.05', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 07:57:49] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 07:57:49] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 11
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 300
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 50
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 07:57:49] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 07:57:56] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 07:57:56] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 07:57:56] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 07:57:56] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 07:57:56] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 07:57:56] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 07:57:57] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 07:57:57] d2.data.build INFO: Distribution of instances among all 8 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|   juvenile    | 1547         |  cannibalism  | 1477         |    moving     | 1578         |
| damaged_adu.. | 1612         | egg_laying_.. | 1577         | damaged_adu.. | 1565         |
|  adult_male   | 1534         | adult_female  | 1488         |               |              |
|     total     | 12378        |               |              |               |              |[0m
[06/09 07:57:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 07:57:57] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 07:57:57] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 07:57:57] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 07:57:57] detectron2 INFO: Starting training from iteration 0
[06/09 07:58:36] d2.utils.events INFO:  iter: 20  total_loss: 3.435  loss_cls: 2.076  loss_box_reg: 0.4812  loss_mask: 0.6918  loss_rpn_cls: 0.1438  loss_rpn_loc: 0.02623  lr: 8.0337e-05  max_mem: 13860M
[06/09 08:00:13] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:00:13] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:00:13] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.WARMUP_ITERS', '300', 'SOLVER.CHECKPOINT_PERIOD', '500', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'TEST.EVAL_PERIOD', '50', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:00:13] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:00:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 300
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 50
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:00:13] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:00:26] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:00:26] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:00:26] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:00:26] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:00:26] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:00:26] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:00:27] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:00:27] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:00:27] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:00:27] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:00:27] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:00:27] detectron2 INFO: Starting training from iteration 0
[06/09 08:02:40] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:02:40] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:02:40] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.CHECKPOINT_PERIOD', '500', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'TEST.EVAL_PERIOD', '50', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:02:40] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:02:40] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 50
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:02:40] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:02:53] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:02:53] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:02:53] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:02:53] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:02:53] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:02:53] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:02:53] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:02:54] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:02:54] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:02:54] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:02:54] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:02:54] detectron2 INFO: Starting training from iteration 0
[06/09 08:05:43] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:05:43] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:05:43] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.CHECKPOINT_PERIOD', '500', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'TEST.EVAL_PERIOD', '50', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:05:43] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:05:43] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 50
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:05:43] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:05:56] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:05:56] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:05:56] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:05:56] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:05:56] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:05:56] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:05:57] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:05:57] d2.data.build INFO: Distribution of instances among all 8 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|   juvenile    | 1547         |  cannibalism  | 1477         |    moving     | 1578         |
| damaged_adu.. | 1612         | egg_laying_.. | 1577         | damaged_adu.. | 1565         |
|  adult_male   | 1534         | adult_female  | 1488         |               |              |
|     total     | 12378        |               |              |               |              |[0m
[06/09 08:05:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:05:57] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:05:57] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:05:57] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:05:57] detectron2 INFO: Starting training from iteration 0
[06/09 08:06:35] d2.utils.events INFO:  iter: 20  total_loss: 3.575  loss_cls: 2.267  loss_box_reg: 0.4517  loss_mask: 0.6923  loss_rpn_cls: 0.1454  loss_rpn_loc: 0.02527  lr: 2.4976e-05  max_mem: 13718M
[06/09 08:10:44] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:10:44] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:10:44] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:10:44] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:10:44] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:10:44] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:10:59] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:10:59] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:10:59] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:10:59] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:10:59] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:11:00] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:11:00] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:11:00] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:11:00] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:11:00] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:11:00] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:11:00] detectron2 INFO: Starting training from iteration 0
[06/09 08:12:18] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:12:19] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:12:19] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:12:19] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:12:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:12:19] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:12:31] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:12:31] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:12:31] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:12:32] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:12:32] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:12:32] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:12:32] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:12:33] d2.data.build INFO: Distribution of instances among all 8 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|   juvenile    | 1547         |  cannibalism  | 1477         |    moving     | 1578         |
| damaged_adu.. | 1612         | egg_laying_.. | 1577         | damaged_adu.. | 1565         |
|  adult_male   | 1534         | adult_female  | 1488         |               |              |
|     total     | 12378        |               |              |               |              |[0m
[06/09 08:12:33] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:12:33] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:12:33] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:12:33] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:12:33] detectron2 INFO: Starting training from iteration 0
[06/09 08:12:38] d2.utils.events INFO:  iter: 20  total_loss: 3.584  loss_cls: 2.271  loss_box_reg: 0.4814  loss_mask: 0.6921  loss_rpn_cls: 0.116  loss_rpn_loc: 0.02003  lr: 2.4976e-05  max_mem: 2371M
[06/09 08:12:44] d2.utils.events INFO:  eta: 0:15:48  iter: 40  total_loss: 2.811  loss_cls: 1.56  loss_box_reg: 0.4616  loss_mask: 0.6884  loss_rpn_cls: 0.07104  loss_rpn_loc: 0.02161  lr: 4.9951e-05  max_mem: 2371M
[06/09 08:12:50] d2.utils.events INFO:  eta: 0:15:57  iter: 60  total_loss: 2.117  loss_cls: 0.8086  loss_box_reg: 0.5711  loss_mask: 0.6769  loss_rpn_cls: 0.05121  loss_rpn_loc: 0.0255  lr: 7.4926e-05  max_mem: 2524M
[06/09 08:12:55] d2.utils.events INFO:  eta: 0:16:27  iter: 80  total_loss: 1.862  loss_cls: 0.6054  loss_box_reg: 0.5446  loss_mask: 0.6655  loss_rpn_cls: 0.02316  loss_rpn_loc: 0.01868  lr: 9.9901e-05  max_mem: 2524M
[06/09 08:13:01] d2.utils.events INFO:  eta: 0:16:13  iter: 100  total_loss: 1.825  loss_cls: 0.5824  loss_box_reg: 0.5667  loss_mask: 0.6426  loss_rpn_cls: 0.01499  loss_rpn_loc: 0.02131  lr: 0.00012488  max_mem: 2524M
[06/09 08:13:07] d2.utils.events INFO:  eta: 0:16:07  iter: 120  total_loss: 1.813  loss_cls: 0.5798  loss_box_reg: 0.5778  loss_mask: 0.6121  loss_rpn_cls: 0.01648  loss_rpn_loc: 0.02379  lr: 0.00014985  max_mem: 2524M
[06/09 08:13:12] d2.utils.events INFO:  eta: 0:15:52  iter: 140  total_loss: 1.829  loss_cls: 0.5854  loss_box_reg: 0.6224  loss_mask: 0.5693  loss_rpn_cls: 0.01064  loss_rpn_loc: 0.02084  lr: 0.00017483  max_mem: 2524M
[06/09 08:13:18] d2.utils.events INFO:  eta: 0:16:24  iter: 160  total_loss: 1.876  loss_cls: 0.6223  loss_box_reg: 0.6749  loss_mask: 0.5118  loss_rpn_cls: 0.01154  loss_rpn_loc: 0.02107  lr: 0.0001998  max_mem: 2559M
[06/09 08:13:24] d2.utils.events INFO:  eta: 0:16:36  iter: 180  total_loss: 1.818  loss_cls: 0.6209  loss_box_reg: 0.7253  loss_mask: 0.4499  loss_rpn_cls: 0.01001  loss_rpn_loc: 0.01999  lr: 0.00022478  max_mem: 2570M
[06/09 08:13:30] d2.utils.events INFO:  eta: 0:16:23  iter: 200  total_loss: 1.583  loss_cls: 0.5612  loss_box_reg: 0.6375  loss_mask: 0.3846  loss_rpn_cls: 0.004041  loss_rpn_loc: 0.02005  lr: 0.00024975  max_mem: 2570M
[06/09 08:13:36] d2.utils.events INFO:  eta: 0:16:48  iter: 220  total_loss: 1.781  loss_cls: 0.6472  loss_box_reg: 0.7553  loss_mask: 0.3324  loss_rpn_cls: 0.007855  loss_rpn_loc: 0.02296  lr: 0.00027473  max_mem: 2570M
[06/09 08:13:42] d2.utils.events INFO:  eta: 0:16:21  iter: 240  total_loss: 1.661  loss_cls: 0.6034  loss_box_reg: 0.7301  loss_mask: 0.3033  loss_rpn_cls: 0.004641  loss_rpn_loc: 0.02208  lr: 0.0002997  max_mem: 2570M
[06/09 08:13:48] d2.utils.events INFO:  eta: 0:15:45  iter: 260  total_loss: 1.503  loss_cls: 0.5614  loss_box_reg: 0.6515  loss_mask: 0.2887  loss_rpn_cls: 0.005709  loss_rpn_loc: 0.02048  lr: 0.00032468  max_mem: 2570M
[06/09 08:13:54] d2.utils.events INFO:  eta: 0:16:14  iter: 280  total_loss: 1.427  loss_cls: 0.5271  loss_box_reg: 0.5899  loss_mask: 0.2615  loss_rpn_cls: 0.005094  loss_rpn_loc: 0.01738  lr: 0.00034965  max_mem: 2570M
[06/09 08:14:00] d2.utils.events INFO:  eta: 0:15:35  iter: 300  total_loss: 1.166  loss_cls: 0.447  loss_box_reg: 0.4449  loss_mask: 0.2583  loss_rpn_cls: 0.005303  loss_rpn_loc: 0.01468  lr: 0.00037463  max_mem: 2570M
[06/09 08:14:06] d2.utils.events INFO:  eta: 0:16:19  iter: 320  total_loss: 1.378  loss_cls: 0.5767  loss_box_reg: 0.5313  loss_mask: 0.2693  loss_rpn_cls: 0.003531  loss_rpn_loc: 0.01994  lr: 0.0003996  max_mem: 2570M
[06/09 08:14:12] d2.utils.events INFO:  eta: 0:16:07  iter: 340  total_loss: 1.34  loss_cls: 0.5787  loss_box_reg: 0.4487  loss_mask: 0.2725  loss_rpn_cls: 0.004359  loss_rpn_loc: 0.0187  lr: 0.00042458  max_mem: 2570M
[06/09 08:14:19] d2.utils.events INFO:  eta: 0:15:45  iter: 360  total_loss: 1.148  loss_cls: 0.4961  loss_box_reg: 0.3582  loss_mask: 0.2594  loss_rpn_cls: 0.003444  loss_rpn_loc: 0.01928  lr: 0.00044955  max_mem: 2570M
[06/09 08:14:25] d2.utils.events INFO:  eta: 0:16:05  iter: 380  total_loss: 1.114  loss_cls: 0.4979  loss_box_reg: 0.3358  loss_mask: 0.2445  loss_rpn_cls: 0.002  loss_rpn_loc: 0.01883  lr: 0.00047453  max_mem: 2570M
[06/09 08:14:31] d2.utils.events INFO:  eta: 0:15:30  iter: 400  total_loss: 1.119  loss_cls: 0.494  loss_box_reg: 0.3352  loss_mask: 0.2435  loss_rpn_cls: 0.00105  loss_rpn_loc: 0.01729  lr: 0.0004995  max_mem: 2570M
[06/09 08:14:37] d2.utils.events INFO:  eta: 0:15:19  iter: 420  total_loss: 0.9997  loss_cls: 0.4377  loss_box_reg: 0.3162  loss_mask: 0.2325  loss_rpn_cls: 0.003462  loss_rpn_loc: 0.01717  lr: 0.00052448  max_mem: 2570M
[06/09 08:14:43] d2.utils.events INFO:  eta: 0:15:11  iter: 440  total_loss: 0.9436  loss_cls: 0.4467  loss_box_reg: 0.2869  loss_mask: 0.2327  loss_rpn_cls: 0.001886  loss_rpn_loc: 0.01329  lr: 0.00054945  max_mem: 2570M
[06/09 08:14:49] d2.utils.events INFO:  eta: 0:15:09  iter: 460  total_loss: 1.081  loss_cls: 0.4729  loss_box_reg: 0.3438  loss_mask: 0.2306  loss_rpn_cls: 0.001227  loss_rpn_loc: 0.01525  lr: 0.00057443  max_mem: 2570M
[06/09 08:14:55] d2.utils.events INFO:  eta: 0:14:58  iter: 480  total_loss: 0.9801  loss_cls: 0.4278  loss_box_reg: 0.3117  loss_mask: 0.2199  loss_rpn_cls: 0.001892  loss_rpn_loc: 0.01846  lr: 0.0005994  max_mem: 2570M
[06/09 08:15:01] d2.utils.events INFO:  eta: 0:14:53  iter: 500  total_loss: 1.002  loss_cls: 0.3981  loss_box_reg: 0.3065  loss_mask: 0.2303  loss_rpn_cls: 0.00417  loss_rpn_loc: 0.01683  lr: 0.00062438  max_mem: 2570M
[06/09 08:15:06] d2.utils.events INFO:  eta: 0:14:37  iter: 520  total_loss: 0.8712  loss_cls: 0.3518  loss_box_reg: 0.2483  loss_mask: 0.2223  loss_rpn_cls: 0.0006731  loss_rpn_loc: 0.01006  lr: 0.00064935  max_mem: 2570M
[06/09 08:15:13] d2.utils.events INFO:  eta: 0:15:39  iter: 540  total_loss: 0.9995  loss_cls: 0.4315  loss_box_reg: 0.3257  loss_mask: 0.2179  loss_rpn_cls: 0.002341  loss_rpn_loc: 0.01687  lr: 0.00067433  max_mem: 2570M
[06/09 08:15:19] d2.utils.events INFO:  eta: 0:14:32  iter: 560  total_loss: 0.9613  loss_cls: 0.3951  loss_box_reg: 0.3109  loss_mask: 0.2307  loss_rpn_cls: 0.001311  loss_rpn_loc: 0.01645  lr: 0.0006993  max_mem: 2570M
[06/09 08:15:25] d2.utils.events INFO:  eta: 0:14:46  iter: 580  total_loss: 1.024  loss_cls: 0.4332  loss_box_reg: 0.3171  loss_mask: 0.2276  loss_rpn_cls: 0.001889  loss_rpn_loc: 0.01843  lr: 0.00072428  max_mem: 2570M
[06/09 08:15:31] d2.utils.events INFO:  eta: 0:14:23  iter: 600  total_loss: 0.8825  loss_cls: 0.3503  loss_box_reg: 0.2871  loss_mask: 0.2105  loss_rpn_cls: 0.003011  loss_rpn_loc: 0.01388  lr: 0.00074925  max_mem: 2570M
[06/09 08:15:37] d2.utils.events INFO:  eta: 0:14:42  iter: 620  total_loss: 1.034  loss_cls: 0.4496  loss_box_reg: 0.3131  loss_mask: 0.2031  loss_rpn_cls: 0.001449  loss_rpn_loc: 0.01831  lr: 0.00077423  max_mem: 2570M
[06/09 08:15:43] d2.utils.events INFO:  eta: 0:14:04  iter: 640  total_loss: 0.8352  loss_cls: 0.3787  loss_box_reg: 0.2622  loss_mask: 0.1977  loss_rpn_cls: 0.0007002  loss_rpn_loc: 0.01196  lr: 0.0007992  max_mem: 2570M
[06/09 08:15:49] d2.utils.events INFO:  eta: 0:14:05  iter: 660  total_loss: 0.9282  loss_cls: 0.4122  loss_box_reg: 0.2955  loss_mask: 0.2039  loss_rpn_cls: 0.001437  loss_rpn_loc: 0.01419  lr: 0.00082418  max_mem: 2570M
[06/09 08:15:55] d2.utils.events INFO:  eta: 0:13:47  iter: 680  total_loss: 0.7432  loss_cls: 0.3112  loss_box_reg: 0.2511  loss_mask: 0.2148  loss_rpn_cls: 0.001722  loss_rpn_loc: 0.01419  lr: 0.00084915  max_mem: 2570M
[06/09 08:16:00] d2.utils.events INFO:  eta: 0:13:30  iter: 700  total_loss: 0.7466  loss_cls: 0.3012  loss_box_reg: 0.2272  loss_mask: 0.2013  loss_rpn_cls: 0.0006774  loss_rpn_loc: 0.01067  lr: 0.00087413  max_mem: 2570M
[06/09 08:16:06] d2.utils.events INFO:  eta: 0:14:03  iter: 720  total_loss: 0.8646  loss_cls: 0.3723  loss_box_reg: 0.2679  loss_mask: 0.2036  loss_rpn_cls: 0.000977  loss_rpn_loc: 0.01529  lr: 0.0008991  max_mem: 2570M
[06/09 08:16:12] d2.utils.events INFO:  eta: 0:13:22  iter: 740  total_loss: 0.8315  loss_cls: 0.3199  loss_box_reg: 0.2555  loss_mask: 0.2209  loss_rpn_cls: 0.000915  loss_rpn_loc: 0.01485  lr: 0.00092408  max_mem: 2570M
[06/09 08:16:18] d2.utils.events INFO:  eta: 0:13:44  iter: 760  total_loss: 0.8765  loss_cls: 0.3702  loss_box_reg: 0.2705  loss_mask: 0.2039  loss_rpn_cls: 0.000953  loss_rpn_loc: 0.01581  lr: 0.00094905  max_mem: 2570M
[06/09 08:16:24] d2.utils.events INFO:  eta: 0:13:15  iter: 780  total_loss: 0.8001  loss_cls: 0.2976  loss_box_reg: 0.2752  loss_mask: 0.2022  loss_rpn_cls: 0.0004842  loss_rpn_loc: 0.0152  lr: 0.00097403  max_mem: 2570M
[06/09 08:16:30] d2.utils.events INFO:  eta: 0:13:47  iter: 800  total_loss: 0.8429  loss_cls: 0.3384  loss_box_reg: 0.2855  loss_mask: 0.1944  loss_rpn_cls: 0.001246  loss_rpn_loc: 0.01775  lr: 0.000999  max_mem: 2570M
[06/09 08:16:36] d2.utils.events INFO:  eta: 0:13:19  iter: 820  total_loss: 0.9239  loss_cls: 0.3748  loss_box_reg: 0.2768  loss_mask: 0.1947  loss_rpn_cls: 0.002207  loss_rpn_loc: 0.01807  lr: 0.001024  max_mem: 2570M
[06/09 08:16:42] d2.utils.events INFO:  eta: 0:13:42  iter: 840  total_loss: 0.8687  loss_cls: 0.3653  loss_box_reg: 0.2925  loss_mask: 0.1928  loss_rpn_cls: 0.00122  loss_rpn_loc: 0.01528  lr: 0.001049  max_mem: 2570M
[06/09 08:16:48] d2.utils.events INFO:  eta: 0:13:10  iter: 860  total_loss: 0.8281  loss_cls: 0.3219  loss_box_reg: 0.2669  loss_mask: 0.1995  loss_rpn_cls: 0.0007206  loss_rpn_loc: 0.01399  lr: 0.0010739  max_mem: 2570M
[06/09 08:16:54] d2.utils.events INFO:  eta: 0:12:55  iter: 880  total_loss: 0.6861  loss_cls: 0.2738  loss_box_reg: 0.2251  loss_mask: 0.1961  loss_rpn_cls: 0.0005921  loss_rpn_loc: 0.01338  lr: 0.0010989  max_mem: 2570M
[06/09 08:17:00] d2.utils.events INFO:  eta: 0:13:07  iter: 900  total_loss: 0.8647  loss_cls: 0.3758  loss_box_reg: 0.279  loss_mask: 0.1983  loss_rpn_cls: 0.0007528  loss_rpn_loc: 0.01539  lr: 0.0011239  max_mem: 2570M
[06/09 08:17:06] d2.utils.events INFO:  eta: 0:12:49  iter: 920  total_loss: 0.7124  loss_cls: 0.284  loss_box_reg: 0.243  loss_mask: 0.1912  loss_rpn_cls: 0.001503  loss_rpn_loc: 0.01462  lr: 0.0011489  max_mem: 2570M
[06/09 08:17:12] d2.utils.events INFO:  eta: 0:12:45  iter: 940  total_loss: 0.7817  loss_cls: 0.2994  loss_box_reg: 0.2746  loss_mask: 0.1985  loss_rpn_cls: 0.0004748  loss_rpn_loc: 0.01695  lr: 0.0011738  max_mem: 2570M
[06/09 08:17:18] d2.utils.events INFO:  eta: 0:12:34  iter: 960  total_loss: 0.6813  loss_cls: 0.2585  loss_box_reg: 0.2413  loss_mask: 0.1699  loss_rpn_cls: 0.0006375  loss_rpn_loc: 0.01433  lr: 0.0011988  max_mem: 2570M
[06/09 08:17:24] d2.utils.events INFO:  eta: 0:12:31  iter: 980  total_loss: 0.702  loss_cls: 0.2624  loss_box_reg: 0.2418  loss_mask: 0.182  loss_rpn_cls: 0.00229  loss_rpn_loc: 0.01572  lr: 0.0012238  max_mem: 2570M
[06/09 08:17:30] d2.utils.events INFO:  eta: 0:12:33  iter: 1000  total_loss: 0.6941  loss_cls: 0.2295  loss_box_reg: 0.2636  loss_mask: 0.1766  loss_rpn_cls: 0.001439  loss_rpn_loc: 0.0155  lr: 0.0012488  max_mem: 2570M
[06/09 08:17:36] d2.utils.events INFO:  eta: 0:12:25  iter: 1020  total_loss: 0.7085  loss_cls: 0.2273  loss_box_reg: 0.2439  loss_mask: 0.1828  loss_rpn_cls: 0.001216  loss_rpn_loc: 0.01286  lr: 0.00125  max_mem: 2570M
[06/09 08:17:42] d2.utils.events INFO:  eta: 0:12:09  iter: 1040  total_loss: 0.7279  loss_cls: 0.2718  loss_box_reg: 0.2541  loss_mask: 0.1817  loss_rpn_cls: 0.0009346  loss_rpn_loc: 0.01346  lr: 0.00125  max_mem: 2570M
[06/09 08:17:48] d2.utils.events INFO:  eta: 0:12:06  iter: 1060  total_loss: 0.7989  loss_cls: 0.3005  loss_box_reg: 0.2798  loss_mask: 0.1737  loss_rpn_cls: 0.002342  loss_rpn_loc: 0.01493  lr: 0.00125  max_mem: 2570M
[06/09 08:17:54] d2.utils.events INFO:  eta: 0:11:37  iter: 1080  total_loss: 0.6226  loss_cls: 0.2508  loss_box_reg: 0.2137  loss_mask: 0.1796  loss_rpn_cls: 0.0005206  loss_rpn_loc: 0.01124  lr: 0.00125  max_mem: 2570M
[06/09 08:18:00] d2.utils.events INFO:  eta: 0:11:52  iter: 1100  total_loss: 0.5923  loss_cls: 0.201  loss_box_reg: 0.196  loss_mask: 0.1656  loss_rpn_cls: 0.0009385  loss_rpn_loc: 0.01316  lr: 0.00125  max_mem: 2570M
[06/09 08:18:06] d2.utils.events INFO:  eta: 0:11:45  iter: 1120  total_loss: 0.6969  loss_cls: 0.2237  loss_box_reg: 0.2798  loss_mask: 0.1848  loss_rpn_cls: 0.001308  loss_rpn_loc: 0.01509  lr: 0.00125  max_mem: 2570M
[06/09 08:18:12] d2.utils.events INFO:  eta: 0:11:46  iter: 1140  total_loss: 0.7122  loss_cls: 0.2488  loss_box_reg: 0.2521  loss_mask: 0.1826  loss_rpn_cls: 0.001352  loss_rpn_loc: 0.01351  lr: 0.00125  max_mem: 2570M
[06/09 08:18:18] d2.utils.events INFO:  eta: 0:11:36  iter: 1160  total_loss: 0.7703  loss_cls: 0.2782  loss_box_reg: 0.2864  loss_mask: 0.1837  loss_rpn_cls: 0.00159  loss_rpn_loc: 0.01532  lr: 0.00125  max_mem: 2570M
[06/09 08:18:24] d2.utils.events INFO:  eta: 0:11:45  iter: 1180  total_loss: 0.7571  loss_cls: 0.2705  loss_box_reg: 0.2567  loss_mask: 0.1887  loss_rpn_cls: 0.0009193  loss_rpn_loc: 0.0158  lr: 0.00125  max_mem: 2570M
[06/09 08:18:30] d2.utils.events INFO:  eta: 0:11:20  iter: 1200  total_loss: 0.6386  loss_cls: 0.2382  loss_box_reg: 0.226  loss_mask: 0.1766  loss_rpn_cls: 0.000407  loss_rpn_loc: 0.01096  lr: 0.00125  max_mem: 2570M
[06/09 08:18:36] d2.utils.events INFO:  eta: 0:11:33  iter: 1220  total_loss: 0.6587  loss_cls: 0.2016  loss_box_reg: 0.2707  loss_mask: 0.179  loss_rpn_cls: 0.00122  loss_rpn_loc: 0.01434  lr: 0.00125  max_mem: 2570M
[06/09 08:18:42] d2.utils.events INFO:  eta: 0:11:34  iter: 1240  total_loss: 0.6308  loss_cls: 0.1966  loss_box_reg: 0.2644  loss_mask: 0.1787  loss_rpn_cls: 0.0008498  loss_rpn_loc: 0.01506  lr: 0.00125  max_mem: 2570M
[06/09 08:18:48] d2.utils.events INFO:  eta: 0:11:38  iter: 1260  total_loss: 0.7151  loss_cls: 0.2155  loss_box_reg: 0.2592  loss_mask: 0.1888  loss_rpn_cls: 0.001557  loss_rpn_loc: 0.01899  lr: 0.00125  max_mem: 2570M
[06/09 08:18:54] d2.utils.events INFO:  eta: 0:10:56  iter: 1280  total_loss: 0.6352  loss_cls: 0.2059  loss_box_reg: 0.2161  loss_mask: 0.1748  loss_rpn_cls: 0.0006813  loss_rpn_loc: 0.01394  lr: 0.00125  max_mem: 2570M
[06/09 08:19:00] d2.utils.events INFO:  eta: 0:11:07  iter: 1300  total_loss: 0.6964  loss_cls: 0.2147  loss_box_reg: 0.2687  loss_mask: 0.1792  loss_rpn_cls: 0.001032  loss_rpn_loc: 0.01588  lr: 0.00125  max_mem: 2570M
[06/09 08:19:06] d2.utils.events INFO:  eta: 0:10:55  iter: 1320  total_loss: 0.6445  loss_cls: 0.1873  loss_box_reg: 0.2465  loss_mask: 0.166  loss_rpn_cls: 0.0004995  loss_rpn_loc: 0.01201  lr: 0.00125  max_mem: 2570M
[06/09 08:19:12] d2.utils.events INFO:  eta: 0:10:42  iter: 1340  total_loss: 0.6137  loss_cls: 0.2018  loss_box_reg: 0.2315  loss_mask: 0.169  loss_rpn_cls: 0.0004917  loss_rpn_loc: 0.01226  lr: 0.00125  max_mem: 2570M
[06/09 08:19:18] d2.utils.events INFO:  eta: 0:10:47  iter: 1360  total_loss: 0.6353  loss_cls: 0.1921  loss_box_reg: 0.2305  loss_mask: 0.1683  loss_rpn_cls: 0.000591  loss_rpn_loc: 0.01261  lr: 0.00125  max_mem: 2570M
[06/09 08:19:24] d2.utils.events INFO:  eta: 0:10:31  iter: 1380  total_loss: 0.7225  loss_cls: 0.2342  loss_box_reg: 0.2609  loss_mask: 0.1746  loss_rpn_cls: 0.001061  loss_rpn_loc: 0.01537  lr: 0.00125  max_mem: 2570M
[06/09 08:19:30] d2.utils.events INFO:  eta: 0:10:15  iter: 1400  total_loss: 0.5526  loss_cls: 0.1697  loss_box_reg: 0.2078  loss_mask: 0.1704  loss_rpn_cls: 0.0006607  loss_rpn_loc: 0.01346  lr: 0.00125  max_mem: 2570M
[06/09 08:19:36] d2.utils.events INFO:  eta: 0:10:26  iter: 1420  total_loss: 0.5315  loss_cls: 0.1419  loss_box_reg: 0.2171  loss_mask: 0.1633  loss_rpn_cls: 0.0007399  loss_rpn_loc: 0.01128  lr: 0.00125  max_mem: 2570M
[06/09 08:19:42] d2.utils.events INFO:  eta: 0:10:36  iter: 1440  total_loss: 0.588  loss_cls: 0.1763  loss_box_reg: 0.2249  loss_mask: 0.159  loss_rpn_cls: 0.000638  loss_rpn_loc: 0.01206  lr: 0.00125  max_mem: 2570M
[06/09 08:19:48] d2.utils.events INFO:  eta: 0:10:17  iter: 1460  total_loss: 0.6458  loss_cls: 0.198  loss_box_reg: 0.2432  loss_mask: 0.1735  loss_rpn_cls: 0.0007554  loss_rpn_loc: 0.01449  lr: 0.00125  max_mem: 2570M
[06/09 08:19:54] d2.utils.events INFO:  eta: 0:10:14  iter: 1480  total_loss: 0.5858  loss_cls: 0.1866  loss_box_reg: 0.2262  loss_mask: 0.1665  loss_rpn_cls: 0.001361  loss_rpn_loc: 0.01442  lr: 0.00125  max_mem: 2570M
[06/09 08:20:00] d2.utils.events INFO:  eta: 0:09:55  iter: 1500  total_loss: 0.6152  loss_cls: 0.1674  loss_box_reg: 0.2213  loss_mask: 0.1742  loss_rpn_cls: 0.001008  loss_rpn_loc: 0.01183  lr: 0.00125  max_mem: 2570M
[06/09 08:20:06] d2.utils.events INFO:  eta: 0:10:01  iter: 1520  total_loss: 0.6934  loss_cls: 0.2055  loss_box_reg: 0.2571  loss_mask: 0.1766  loss_rpn_cls: 0.0006263  loss_rpn_loc: 0.01472  lr: 0.00125  max_mem: 2570M
[06/09 08:20:13] d2.utils.events INFO:  eta: 0:09:55  iter: 1540  total_loss: 0.6907  loss_cls: 0.1967  loss_box_reg: 0.2876  loss_mask: 0.1666  loss_rpn_cls: 0.0008121  loss_rpn_loc: 0.01584  lr: 0.00125  max_mem: 2570M
[06/09 08:20:19] d2.utils.events INFO:  eta: 0:09:42  iter: 1560  total_loss: 0.5033  loss_cls: 0.1328  loss_box_reg: 0.2021  loss_mask: 0.1721  loss_rpn_cls: 0.0009436  loss_rpn_loc: 0.01164  lr: 0.00125  max_mem: 2570M
[06/09 08:20:25] d2.utils.events INFO:  eta: 0:09:45  iter: 1580  total_loss: 0.5576  loss_cls: 0.1593  loss_box_reg: 0.2195  loss_mask: 0.1673  loss_rpn_cls: 0.0002818  loss_rpn_loc: 0.01163  lr: 0.00125  max_mem: 2570M
[06/09 08:20:31] d2.utils.events INFO:  eta: 0:09:47  iter: 1600  total_loss: 0.5587  loss_cls: 0.2014  loss_box_reg: 0.2088  loss_mask: 0.1691  loss_rpn_cls: 0.001837  loss_rpn_loc: 0.01387  lr: 0.00125  max_mem: 2570M
[06/09 08:20:37] d2.utils.events INFO:  eta: 0:09:40  iter: 1620  total_loss: 0.5693  loss_cls: 0.1838  loss_box_reg: 0.2371  loss_mask: 0.1723  loss_rpn_cls: 0.00126  loss_rpn_loc: 0.01381  lr: 0.00125  max_mem: 2570M
[06/09 08:20:43] d2.utils.events INFO:  eta: 0:09:18  iter: 1640  total_loss: 0.5694  loss_cls: 0.1554  loss_box_reg: 0.2336  loss_mask: 0.1711  loss_rpn_cls: 0.000828  loss_rpn_loc: 0.01484  lr: 0.00125  max_mem: 2570M
[06/09 08:20:49] d2.utils.events INFO:  eta: 0:08:58  iter: 1660  total_loss: 0.5415  loss_cls: 0.134  loss_box_reg: 0.1949  loss_mask: 0.1628  loss_rpn_cls: 0.0007351  loss_rpn_loc: 0.01017  lr: 0.00125  max_mem: 2570M
[06/09 08:20:55] d2.utils.events INFO:  eta: 0:08:58  iter: 1680  total_loss: 0.5724  loss_cls: 0.1428  loss_box_reg: 0.2138  loss_mask: 0.1613  loss_rpn_cls: 0.0005603  loss_rpn_loc: 0.01265  lr: 0.00125  max_mem: 2570M
[06/09 08:21:01] d2.utils.events INFO:  eta: 0:09:24  iter: 1700  total_loss: 0.6496  loss_cls: 0.1741  loss_box_reg: 0.253  loss_mask: 0.1895  loss_rpn_cls: 0.001133  loss_rpn_loc: 0.01618  lr: 0.00125  max_mem: 2570M
[06/09 08:21:07] d2.utils.events INFO:  eta: 0:08:40  iter: 1720  total_loss: 0.4718  loss_cls: 0.1166  loss_box_reg: 0.1881  loss_mask: 0.163  loss_rpn_cls: 0.000604  loss_rpn_loc: 0.01145  lr: 0.00125  max_mem: 2570M
[06/09 08:21:13] d2.utils.events INFO:  eta: 0:08:40  iter: 1740  total_loss: 0.5287  loss_cls: 0.1515  loss_box_reg: 0.1984  loss_mask: 0.1584  loss_rpn_cls: 0.0006077  loss_rpn_loc: 0.01127  lr: 0.00125  max_mem: 2570M
[06/09 08:21:19] d2.utils.events INFO:  eta: 0:08:45  iter: 1760  total_loss: 0.5734  loss_cls: 0.1521  loss_box_reg: 0.2222  loss_mask: 0.1713  loss_rpn_cls: 0.001403  loss_rpn_loc: 0.01499  lr: 0.00125  max_mem: 2570M
[06/09 08:21:25] d2.utils.events INFO:  eta: 0:08:36  iter: 1780  total_loss: 0.5067  loss_cls: 0.1286  loss_box_reg: 0.2127  loss_mask: 0.1566  loss_rpn_cls: 0.001245  loss_rpn_loc: 0.01213  lr: 0.00125  max_mem: 2570M
[06/09 08:21:31] d2.utils.events INFO:  eta: 0:08:07  iter: 1800  total_loss: 0.5173  loss_cls: 0.1438  loss_box_reg: 0.1845  loss_mask: 0.1665  loss_rpn_cls: 0.000411  loss_rpn_loc: 0.009786  lr: 0.00125  max_mem: 2570M
[06/09 08:21:37] d2.utils.events INFO:  eta: 0:08:29  iter: 1820  total_loss: 0.5555  loss_cls: 0.155  loss_box_reg: 0.2272  loss_mask: 0.1594  loss_rpn_cls: 0.0004499  loss_rpn_loc: 0.01184  lr: 0.00125  max_mem: 2570M
[06/09 08:21:42] d2.utils.events INFO:  eta: 0:07:56  iter: 1840  total_loss: 0.5039  loss_cls: 0.1245  loss_box_reg: 0.1982  loss_mask: 0.1625  loss_rpn_cls: 0.0007974  loss_rpn_loc: 0.0116  lr: 0.00125  max_mem: 2570M
[06/09 08:21:48] d2.utils.events INFO:  eta: 0:08:06  iter: 1860  total_loss: 0.6424  loss_cls: 0.1938  loss_box_reg: 0.2535  loss_mask: 0.1826  loss_rpn_cls: 0.001048  loss_rpn_loc: 0.013  lr: 0.00125  max_mem: 2570M
[06/09 08:21:54] d2.utils.events INFO:  eta: 0:07:57  iter: 1880  total_loss: 0.5127  loss_cls: 0.1457  loss_box_reg: 0.2091  loss_mask: 0.1786  loss_rpn_cls: 0.0005441  loss_rpn_loc: 0.01347  lr: 0.00125  max_mem: 2570M
[06/09 08:22:00] d2.utils.events INFO:  eta: 0:07:47  iter: 1900  total_loss: 0.5109  loss_cls: 0.1394  loss_box_reg: 0.1911  loss_mask: 0.1628  loss_rpn_cls: 0.0002603  loss_rpn_loc: 0.01125  lr: 0.00125  max_mem: 2570M
[06/09 08:22:06] d2.utils.events INFO:  eta: 0:07:55  iter: 1920  total_loss: 0.5464  loss_cls: 0.135  loss_box_reg: 0.2136  loss_mask: 0.1753  loss_rpn_cls: 0.0004724  loss_rpn_loc: 0.01178  lr: 0.00125  max_mem: 2570M
[06/09 08:22:12] d2.utils.events INFO:  eta: 0:07:52  iter: 1940  total_loss: 0.6056  loss_cls: 0.1793  loss_box_reg: 0.2292  loss_mask: 0.182  loss_rpn_cls: 0.002488  loss_rpn_loc: 0.01399  lr: 0.00125  max_mem: 2570M
[06/09 08:22:18] d2.utils.events INFO:  eta: 0:07:44  iter: 1960  total_loss: 0.5697  loss_cls: 0.1568  loss_box_reg: 0.2309  loss_mask: 0.1667  loss_rpn_cls: 0.001172  loss_rpn_loc: 0.01308  lr: 0.00125  max_mem: 2570M
[06/09 08:22:24] d2.utils.events INFO:  eta: 0:07:35  iter: 1980  total_loss: 0.5621  loss_cls: 0.1678  loss_box_reg: 0.2141  loss_mask: 0.1594  loss_rpn_cls: 0.0005723  loss_rpn_loc: 0.009821  lr: 0.00125  max_mem: 2570M
[06/09 08:22:30] d2.utils.events INFO:  eta: 0:07:25  iter: 2000  total_loss: 0.4729  loss_cls: 0.1194  loss_box_reg: 0.1851  loss_mask: 0.1611  loss_rpn_cls: 0.0002974  loss_rpn_loc: 0.01263  lr: 0.00125  max_mem: 2570M
[06/09 08:22:36] d2.utils.events INFO:  eta: 0:07:22  iter: 2020  total_loss: 0.5187  loss_cls: 0.1486  loss_box_reg: 0.1932  loss_mask: 0.1573  loss_rpn_cls: 0.000439  loss_rpn_loc: 0.01073  lr: 0.00125  max_mem: 2570M
[06/09 08:22:42] d2.utils.events INFO:  eta: 0:07:19  iter: 2040  total_loss: 0.5427  loss_cls: 0.1385  loss_box_reg: 0.2111  loss_mask: 0.1703  loss_rpn_cls: 0.000542  loss_rpn_loc: 0.01008  lr: 0.00125  max_mem: 2570M
[06/09 08:22:48] d2.utils.events INFO:  eta: 0:07:21  iter: 2060  total_loss: 0.5192  loss_cls: 0.1375  loss_box_reg: 0.1974  loss_mask: 0.1546  loss_rpn_cls: 0.0005091  loss_rpn_loc: 0.01156  lr: 0.00125  max_mem: 2570M
[06/09 08:22:54] d2.utils.events INFO:  eta: 0:07:12  iter: 2080  total_loss: 0.5636  loss_cls: 0.1406  loss_box_reg: 0.2344  loss_mask: 0.1687  loss_rpn_cls: 0.0007657  loss_rpn_loc: 0.01269  lr: 0.00125  max_mem: 2570M
[06/09 08:23:00] d2.utils.events INFO:  eta: 0:06:56  iter: 2100  total_loss: 0.5742  loss_cls: 0.1583  loss_box_reg: 0.2346  loss_mask: 0.1669  loss_rpn_cls: 0.0009055  loss_rpn_loc: 0.01329  lr: 0.00125  max_mem: 2570M
[06/09 08:23:06] d2.utils.events INFO:  eta: 0:06:46  iter: 2120  total_loss: 0.5544  loss_cls: 0.1481  loss_box_reg: 0.2084  loss_mask: 0.1579  loss_rpn_cls: 0.0004068  loss_rpn_loc: 0.01184  lr: 0.00125  max_mem: 2570M
[06/09 08:23:12] d2.utils.events INFO:  eta: 0:06:37  iter: 2140  total_loss: 0.5489  loss_cls: 0.1508  loss_box_reg: 0.2031  loss_mask: 0.1728  loss_rpn_cls: 0.0004514  loss_rpn_loc: 0.009784  lr: 0.00125  max_mem: 2570M
[06/09 08:23:18] d2.utils.events INFO:  eta: 0:06:40  iter: 2160  total_loss: 0.5739  loss_cls: 0.1529  loss_box_reg: 0.2247  loss_mask: 0.1641  loss_rpn_cls: 0.000847  loss_rpn_loc: 0.01333  lr: 0.00125  max_mem: 2570M
[06/09 08:23:24] d2.utils.events INFO:  eta: 0:06:39  iter: 2180  total_loss: 0.5769  loss_cls: 0.1621  loss_box_reg: 0.2391  loss_mask: 0.166  loss_rpn_cls: 0.0006747  loss_rpn_loc: 0.01468  lr: 0.00125  max_mem: 2570M
[06/09 08:23:30] d2.utils.events INFO:  eta: 0:06:29  iter: 2200  total_loss: 0.5764  loss_cls: 0.1588  loss_box_reg: 0.214  loss_mask: 0.1626  loss_rpn_cls: 0.001899  loss_rpn_loc: 0.01359  lr: 0.00125  max_mem: 2570M
[06/09 08:23:36] d2.utils.events INFO:  eta: 0:06:19  iter: 2220  total_loss: 0.4991  loss_cls: 0.137  loss_box_reg: 0.197  loss_mask: 0.1621  loss_rpn_cls: 0.001201  loss_rpn_loc: 0.01546  lr: 0.00125  max_mem: 2570M
[06/09 08:23:42] d2.utils.events INFO:  eta: 0:06:08  iter: 2240  total_loss: 0.5511  loss_cls: 0.1289  loss_box_reg: 0.2289  loss_mask: 0.1597  loss_rpn_cls: 0.001182  loss_rpn_loc: 0.01318  lr: 0.00125  max_mem: 2570M
[06/09 08:23:48] d2.utils.events INFO:  eta: 0:06:05  iter: 2260  total_loss: 0.4593  loss_cls: 0.125  loss_box_reg: 0.1836  loss_mask: 0.1515  loss_rpn_cls: 0.0005901  loss_rpn_loc: 0.01169  lr: 0.00125  max_mem: 2570M
[06/09 08:23:54] d2.utils.events INFO:  eta: 0:05:59  iter: 2280  total_loss: 0.4479  loss_cls: 0.09393  loss_box_reg: 0.1835  loss_mask: 0.1481  loss_rpn_cls: 0.0003616  loss_rpn_loc: 0.008511  lr: 0.00125  max_mem: 2570M
[06/09 08:24:00] d2.utils.events INFO:  eta: 0:05:58  iter: 2300  total_loss: 0.5442  loss_cls: 0.134  loss_box_reg: 0.2299  loss_mask: 0.1762  loss_rpn_cls: 0.001076  loss_rpn_loc: 0.01195  lr: 0.00125  max_mem: 2570M
[06/09 08:24:06] d2.utils.events INFO:  eta: 0:05:50  iter: 2320  total_loss: 0.6055  loss_cls: 0.1483  loss_box_reg: 0.2337  loss_mask: 0.1764  loss_rpn_cls: 0.001773  loss_rpn_loc: 0.01453  lr: 0.00125  max_mem: 2570M
[06/09 08:24:12] d2.utils.events INFO:  eta: 0:06:00  iter: 2340  total_loss: 0.5593  loss_cls: 0.1362  loss_box_reg: 0.2411  loss_mask: 0.1612  loss_rpn_cls: 0.0009004  loss_rpn_loc: 0.01233  lr: 0.00125  max_mem: 2570M
[06/09 08:24:18] d2.utils.events INFO:  eta: 0:05:49  iter: 2360  total_loss: 0.6255  loss_cls: 0.176  loss_box_reg: 0.266  loss_mask: 0.1777  loss_rpn_cls: 0.001607  loss_rpn_loc: 0.01586  lr: 0.00125  max_mem: 2570M
[06/09 08:24:24] d2.utils.events INFO:  eta: 0:05:27  iter: 2380  total_loss: 0.4586  loss_cls: 0.1023  loss_box_reg: 0.1958  loss_mask: 0.1553  loss_rpn_cls: 0.0005837  loss_rpn_loc: 0.00909  lr: 0.00125  max_mem: 2570M
[06/09 08:24:30] d2.utils.events INFO:  eta: 0:05:32  iter: 2400  total_loss: 0.5325  loss_cls: 0.1138  loss_box_reg: 0.2162  loss_mask: 0.171  loss_rpn_cls: 0.0007601  loss_rpn_loc: 0.01251  lr: 0.00125  max_mem: 2570M
[06/09 08:24:36] d2.utils.events INFO:  eta: 0:05:24  iter: 2420  total_loss: 0.5395  loss_cls: 0.1372  loss_box_reg: 0.2133  loss_mask: 0.1693  loss_rpn_cls: 0.000448  loss_rpn_loc: 0.01126  lr: 0.00125  max_mem: 2570M
[06/09 08:24:42] d2.utils.events INFO:  eta: 0:05:13  iter: 2440  total_loss: 0.5174  loss_cls: 0.1268  loss_box_reg: 0.2105  loss_mask: 0.1604  loss_rpn_cls: 0.0006883  loss_rpn_loc: 0.009285  lr: 0.00125  max_mem: 2570M
[06/09 08:24:48] d2.utils.events INFO:  eta: 0:05:16  iter: 2460  total_loss: 0.4693  loss_cls: 0.1161  loss_box_reg: 0.1888  loss_mask: 0.1549  loss_rpn_cls: 0.0009036  loss_rpn_loc: 0.01126  lr: 0.00125  max_mem: 2570M
[06/09 08:24:54] d2.utils.events INFO:  eta: 0:05:10  iter: 2480  total_loss: 0.5279  loss_cls: 0.1305  loss_box_reg: 0.218  loss_mask: 0.1512  loss_rpn_cls: 0.0009768  loss_rpn_loc: 0.01293  lr: 0.00125  max_mem: 2570M
[06/09 08:25:00] d2.utils.events INFO:  eta: 0:05:00  iter: 2500  total_loss: 0.5355  loss_cls: 0.1364  loss_box_reg: 0.2107  loss_mask: 0.1645  loss_rpn_cls: 0.0007389  loss_rpn_loc: 0.01106  lr: 0.00125  max_mem: 2570M
[06/09 08:25:06] d2.utils.events INFO:  eta: 0:04:40  iter: 2520  total_loss: 0.5004  loss_cls: 0.1262  loss_box_reg: 0.1892  loss_mask: 0.157  loss_rpn_cls: 0.0006364  loss_rpn_loc: 0.009063  lr: 0.00125  max_mem: 2570M
[06/09 08:25:12] d2.utils.events INFO:  eta: 0:04:44  iter: 2540  total_loss: 0.5368  loss_cls: 0.1314  loss_box_reg: 0.2215  loss_mask: 0.1668  loss_rpn_cls: 0.001133  loss_rpn_loc: 0.01041  lr: 0.00125  max_mem: 2570M
[06/09 08:25:18] d2.utils.events INFO:  eta: 0:04:49  iter: 2560  total_loss: 0.4684  loss_cls: 0.1083  loss_box_reg: 0.1823  loss_mask: 0.1696  loss_rpn_cls: 0.000539  loss_rpn_loc: 0.01239  lr: 0.00125  max_mem: 2570M
[06/09 08:25:24] d2.utils.events INFO:  eta: 0:04:26  iter: 2580  total_loss: 0.4954  loss_cls: 0.1273  loss_box_reg: 0.1924  loss_mask: 0.1604  loss_rpn_cls: 0.0005178  loss_rpn_loc: 0.009816  lr: 0.00125  max_mem: 2570M
[06/09 08:25:30] d2.utils.events INFO:  eta: 0:04:30  iter: 2600  total_loss: 0.5436  loss_cls: 0.14  loss_box_reg: 0.2126  loss_mask: 0.1575  loss_rpn_cls: 0.0006277  loss_rpn_loc: 0.013  lr: 0.00125  max_mem: 2570M
[06/09 08:25:36] d2.utils.events INFO:  eta: 0:04:30  iter: 2620  total_loss: 0.5436  loss_cls: 0.141  loss_box_reg: 0.2229  loss_mask: 0.1632  loss_rpn_cls: 0.0002642  loss_rpn_loc: 0.01324  lr: 0.00125  max_mem: 2570M
[06/09 08:25:42] d2.utils.events INFO:  eta: 0:04:17  iter: 2640  total_loss: 0.4742  loss_cls: 0.1148  loss_box_reg: 0.1787  loss_mask: 0.1466  loss_rpn_cls: 0.0002841  loss_rpn_loc: 0.01194  lr: 0.00125  max_mem: 2570M
[06/09 08:25:48] d2.utils.events INFO:  eta: 0:04:20  iter: 2660  total_loss: 0.5078  loss_cls: 0.116  loss_box_reg: 0.1911  loss_mask: 0.1591  loss_rpn_cls: 0.0006928  loss_rpn_loc: 0.01181  lr: 0.00125  max_mem: 2570M
[06/09 08:25:54] d2.utils.events INFO:  eta: 0:03:56  iter: 2680  total_loss: 0.5161  loss_cls: 0.1189  loss_box_reg: 0.2332  loss_mask: 0.1621  loss_rpn_cls: 0.0006608  loss_rpn_loc: 0.01165  lr: 0.00125  max_mem: 2570M
[06/09 08:26:00] d2.utils.events INFO:  eta: 0:04:00  iter: 2700  total_loss: 0.4766  loss_cls: 0.1143  loss_box_reg: 0.1874  loss_mask: 0.1632  loss_rpn_cls: 0.0006242  loss_rpn_loc: 0.01127  lr: 0.00125  max_mem: 2570M
[06/09 08:26:06] d2.utils.events INFO:  eta: 0:03:52  iter: 2720  total_loss: 0.4259  loss_cls: 0.08868  loss_box_reg: 0.1737  loss_mask: 0.147  loss_rpn_cls: 0.0007948  loss_rpn_loc: 0.01308  lr: 0.00125  max_mem: 2570M
[06/09 08:26:12] d2.utils.events INFO:  eta: 0:03:52  iter: 2740  total_loss: 0.4932  loss_cls: 0.09895  loss_box_reg: 0.2105  loss_mask: 0.1537  loss_rpn_cls: 0.0004647  loss_rpn_loc: 0.01247  lr: 0.00125  max_mem: 2570M
[06/09 08:26:18] d2.utils.events INFO:  eta: 0:03:36  iter: 2760  total_loss: 0.463  loss_cls: 0.1068  loss_box_reg: 0.187  loss_mask: 0.1415  loss_rpn_cls: 0.0006951  loss_rpn_loc: 0.01074  lr: 0.00125  max_mem: 2570M
[06/09 08:26:24] d2.utils.events INFO:  eta: 0:03:33  iter: 2780  total_loss: 0.5091  loss_cls: 0.1324  loss_box_reg: 0.2096  loss_mask: 0.165  loss_rpn_cls: 0.0004223  loss_rpn_loc: 0.01199  lr: 0.00125  max_mem: 2570M
[06/09 08:26:30] d2.utils.events INFO:  eta: 0:03:26  iter: 2800  total_loss: 0.4606  loss_cls: 0.1256  loss_box_reg: 0.1916  loss_mask: 0.1558  loss_rpn_cls: 0.0009038  loss_rpn_loc: 0.01119  lr: 0.00125  max_mem: 2570M
[06/09 08:26:36] d2.utils.events INFO:  eta: 0:03:23  iter: 2820  total_loss: 0.4968  loss_cls: 0.1321  loss_box_reg: 0.2104  loss_mask: 0.1586  loss_rpn_cls: 0.001412  loss_rpn_loc: 0.01396  lr: 0.00125  max_mem: 2570M
[06/09 08:26:42] d2.utils.events INFO:  eta: 0:03:12  iter: 2840  total_loss: 0.485  loss_cls: 0.09954  loss_box_reg: 0.2065  loss_mask: 0.1478  loss_rpn_cls: 0.001812  loss_rpn_loc: 0.01103  lr: 0.00125  max_mem: 2570M
[06/09 08:26:48] d2.utils.events INFO:  eta: 0:03:10  iter: 2860  total_loss: 0.4508  loss_cls: 0.1071  loss_box_reg: 0.1832  loss_mask: 0.1528  loss_rpn_cls: 0.001134  loss_rpn_loc: 0.01094  lr: 0.00125  max_mem: 2570M
[06/09 08:26:53] d2.utils.events INFO:  eta: 0:03:04  iter: 2880  total_loss: 0.4645  loss_cls: 0.1043  loss_box_reg: 0.1838  loss_mask: 0.1585  loss_rpn_cls: 0.000571  loss_rpn_loc: 0.01168  lr: 0.00125  max_mem: 2570M
[06/09 08:27:00] d2.utils.events INFO:  eta: 0:03:02  iter: 2900  total_loss: 0.3935  loss_cls: 0.08349  loss_box_reg: 0.1604  loss_mask: 0.1447  loss_rpn_cls: 0.0005631  loss_rpn_loc: 0.0115  lr: 0.00125  max_mem: 2570M
[06/09 08:27:06] d2.utils.events INFO:  eta: 0:02:54  iter: 2920  total_loss: 0.5009  loss_cls: 0.1128  loss_box_reg: 0.1842  loss_mask: 0.1594  loss_rpn_cls: 0.0008611  loss_rpn_loc: 0.01187  lr: 0.00125  max_mem: 2570M
[06/09 08:27:12] d2.utils.events INFO:  eta: 0:02:44  iter: 2940  total_loss: 0.4725  loss_cls: 0.1102  loss_box_reg: 0.1787  loss_mask: 0.1511  loss_rpn_cls: 0.0003593  loss_rpn_loc: 0.01386  lr: 0.00125  max_mem: 2570M
[06/09 08:27:17] d2.utils.events INFO:  eta: 0:02:34  iter: 2960  total_loss: 0.4662  loss_cls: 0.1038  loss_box_reg: 0.2022  loss_mask: 0.16  loss_rpn_cls: 0.0003315  loss_rpn_loc: 0.012  lr: 0.00125  max_mem: 2570M
[06/09 08:27:23] d2.utils.events INFO:  eta: 0:02:35  iter: 2980  total_loss: 0.4205  loss_cls: 0.08339  loss_box_reg: 0.1643  loss_mask: 0.1418  loss_rpn_cls: 0.0008389  loss_rpn_loc: 0.009376  lr: 0.00125  max_mem: 2570M
[06/09 08:27:29] d2.utils.events INFO:  eta: 0:02:27  iter: 3000  total_loss: 0.4557  loss_cls: 0.1116  loss_box_reg: 0.1856  loss_mask: 0.1583  loss_rpn_cls: 0.0005966  loss_rpn_loc: 0.009292  lr: 0.00125  max_mem: 2570M
[06/09 08:27:35] d2.utils.events INFO:  eta: 0:02:27  iter: 3020  total_loss: 0.5808  loss_cls: 0.139  loss_box_reg: 0.2206  loss_mask: 0.1596  loss_rpn_cls: 0.000676  loss_rpn_loc: 0.01282  lr: 0.00125  max_mem: 2570M
[06/09 08:27:41] d2.utils.events INFO:  eta: 0:02:14  iter: 3040  total_loss: 0.478  loss_cls: 0.1153  loss_box_reg: 0.1855  loss_mask: 0.1632  loss_rpn_cls: 0.000413  loss_rpn_loc: 0.0104  lr: 0.00125  max_mem: 2570M
[06/09 08:27:47] d2.utils.events INFO:  eta: 0:02:11  iter: 3060  total_loss: 0.4912  loss_cls: 0.1172  loss_box_reg: 0.2145  loss_mask: 0.1546  loss_rpn_cls: 0.0004452  loss_rpn_loc: 0.0141  lr: 0.00125  max_mem: 2570M
[06/09 08:27:53] d2.utils.events INFO:  eta: 0:02:04  iter: 3080  total_loss: 0.4426  loss_cls: 0.1024  loss_box_reg: 0.1744  loss_mask: 0.1508  loss_rpn_cls: 0.0004035  loss_rpn_loc: 0.009426  lr: 0.00125  max_mem: 2570M
[06/09 08:27:59] d2.utils.events INFO:  eta: 0:01:56  iter: 3100  total_loss: 0.4694  loss_cls: 0.1405  loss_box_reg: 0.1662  loss_mask: 0.1534  loss_rpn_cls: 0.0005159  loss_rpn_loc: 0.01154  lr: 0.00125  max_mem: 2570M
[06/09 08:28:05] d2.utils.events INFO:  eta: 0:01:52  iter: 3120  total_loss: 0.5305  loss_cls: 0.1434  loss_box_reg: 0.2212  loss_mask: 0.1524  loss_rpn_cls: 0.0004739  loss_rpn_loc: 0.01374  lr: 0.00125  max_mem: 2570M
[06/09 08:28:11] d2.utils.events INFO:  eta: 0:01:47  iter: 3140  total_loss: 0.4035  loss_cls: 0.09513  loss_box_reg: 0.1646  loss_mask: 0.1525  loss_rpn_cls: 0.0002701  loss_rpn_loc: 0.008287  lr: 0.00125  max_mem: 2570M
[06/09 08:28:17] d2.utils.events INFO:  eta: 0:01:45  iter: 3160  total_loss: 0.4754  loss_cls: 0.124  loss_box_reg: 0.19  loss_mask: 0.1509  loss_rpn_cls: 0.0004062  loss_rpn_loc: 0.01073  lr: 0.00125  max_mem: 2570M
[06/09 08:28:23] d2.utils.events INFO:  eta: 0:01:38  iter: 3180  total_loss: 0.4688  loss_cls: 0.1064  loss_box_reg: 0.1809  loss_mask: 0.1425  loss_rpn_cls: 0.0008828  loss_rpn_loc: 0.01197  lr: 0.00125  max_mem: 2570M
[06/09 08:28:29] d2.utils.events INFO:  eta: 0:01:32  iter: 3200  total_loss: 0.529  loss_cls: 0.1261  loss_box_reg: 0.2086  loss_mask: 0.1611  loss_rpn_cls: 0.0006527  loss_rpn_loc: 0.01282  lr: 0.00125  max_mem: 2570M
[06/09 08:28:36] d2.utils.events INFO:  eta: 0:01:24  iter: 3220  total_loss: 0.4675  loss_cls: 0.1185  loss_box_reg: 0.1876  loss_mask: 0.1612  loss_rpn_cls: 0.0007496  loss_rpn_loc: 0.01052  lr: 0.00125  max_mem: 2570M
[06/09 08:28:42] d2.utils.events INFO:  eta: 0:01:17  iter: 3240  total_loss: 0.4969  loss_cls: 0.1196  loss_box_reg: 0.2143  loss_mask: 0.1542  loss_rpn_cls: 0.0006761  loss_rpn_loc: 0.01349  lr: 0.00125  max_mem: 2570M
[06/09 08:28:47] d2.utils.events INFO:  eta: 0:01:10  iter: 3260  total_loss: 0.439  loss_cls: 0.08589  loss_box_reg: 0.2062  loss_mask: 0.1533  loss_rpn_cls: 0.000495  loss_rpn_loc: 0.0114  lr: 0.00125  max_mem: 2570M
[06/09 08:28:54] d2.utils.events INFO:  eta: 0:01:08  iter: 3280  total_loss: 0.526  loss_cls: 0.1201  loss_box_reg: 0.2037  loss_mask: 0.1578  loss_rpn_cls: 0.0003501  loss_rpn_loc: 0.01321  lr: 0.00125  max_mem: 2570M
[06/09 08:29:00] d2.utils.events INFO:  eta: 0:00:59  iter: 3300  total_loss: 0.5422  loss_cls: 0.1335  loss_box_reg: 0.2129  loss_mask: 0.1623  loss_rpn_cls: 0.0006716  loss_rpn_loc: 0.01281  lr: 0.00125  max_mem: 2570M
[06/09 08:29:06] d2.utils.events INFO:  eta: 0:00:54  iter: 3320  total_loss: 0.5232  loss_cls: 0.1271  loss_box_reg: 0.2221  loss_mask: 0.1506  loss_rpn_cls: 0.0006175  loss_rpn_loc: 0.0131  lr: 0.00125  max_mem: 2570M
[06/09 08:29:12] d2.utils.events INFO:  eta: 0:00:47  iter: 3340  total_loss: 0.5216  loss_cls: 0.1276  loss_box_reg: 0.2172  loss_mask: 0.1569  loss_rpn_cls: 0.0006003  loss_rpn_loc: 0.01186  lr: 0.00125  max_mem: 2570M
[06/09 08:29:18] d2.utils.events INFO:  eta: 0:00:42  iter: 3360  total_loss: 0.4653  loss_cls: 0.1193  loss_box_reg: 0.188  loss_mask: 0.1561  loss_rpn_cls: 0.0004754  loss_rpn_loc: 0.01041  lr: 0.00125  max_mem: 2570M
[06/09 08:29:24] d2.utils.events INFO:  eta: 0:00:36  iter: 3380  total_loss: 0.5022  loss_cls: 0.117  loss_box_reg: 0.1821  loss_mask: 0.1592  loss_rpn_cls: 0.0002144  loss_rpn_loc: 0.01086  lr: 0.00125  max_mem: 2570M
[06/09 08:29:30] d2.utils.events INFO:  eta: 0:00:29  iter: 3400  total_loss: 0.3912  loss_cls: 0.08649  loss_box_reg: 0.1581  loss_mask: 0.1556  loss_rpn_cls: 0.0003241  loss_rpn_loc: 0.009758  lr: 0.00125  max_mem: 2570M
[06/09 08:29:36] d2.utils.events INFO:  eta: 0:00:23  iter: 3420  total_loss: 0.5038  loss_cls: 0.1336  loss_box_reg: 0.1854  loss_mask: 0.1575  loss_rpn_cls: 0.0007551  loss_rpn_loc: 0.01326  lr: 0.00125  max_mem: 2570M
[06/09 08:29:42] d2.utils.events INFO:  eta: 0:00:17  iter: 3440  total_loss: 0.4442  loss_cls: 0.09352  loss_box_reg: 0.1706  loss_mask: 0.1553  loss_rpn_cls: 0.0004781  loss_rpn_loc: 0.01223  lr: 0.00125  max_mem: 2570M
[06/09 08:29:48] d2.utils.events INFO:  eta: 0:00:11  iter: 3460  total_loss: 0.4783  loss_cls: 0.1094  loss_box_reg: 0.188  loss_mask: 0.1521  loss_rpn_cls: 0.0005094  loss_rpn_loc: 0.01147  lr: 0.00125  max_mem: 2570M
[06/09 08:29:53] d2.utils.events INFO:  eta: 0:00:05  iter: 3480  total_loss: 0.4967  loss_cls: 0.1247  loss_box_reg: 0.2071  loss_mask: 0.156  loss_rpn_cls: 0.0003748  loss_rpn_loc: 0.01047  lr: 0.00125  max_mem: 2570M
[06/09 08:29:59] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_final.pth
[06/09 08:30:01] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_final.pth
[06/09 08:30:02] d2.data.datasets.coco INFO: Loaded 150 images in COCO format from test_info/coco_instances.json
[06/09 08:30:02] d2.data.build INFO: Distribution of instances among all 8 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    moving     | 85           |   juvenile   | 91           | damaged_adu.. | 86           |
| damaged_adu.. | 102          | adult_female | 102          |  cannibalism  | 88           |
| egg_laying_.. | 90           |  adult_male  | 78           |               |              |
|     total     | 722          |              |              |               |              |[0m
[06/09 08:30:02] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[06/09 08:30:02] d2.data.common INFO: Serializing 150 elements to byte tensors and concatenating them all ...
[06/09 08:30:02] d2.data.common INFO: Serialized dataset takes 0.97 MiB
[06/09 08:30:02] d2.evaluation.evaluator INFO: Start inference on 150 images
[06/09 08:30:03] d2.evaluation.evaluator INFO: Inference done 11/150. 0.0558 s / img. ETA=0:00:09
[06/09 08:30:08] d2.evaluation.evaluator INFO: Inference done 84/150. 0.0565 s / img. ETA=0:00:04
[06/09 08:30:12] d2.evaluation.evaluator INFO: Total inference time: 0:00:10.013435 (0.069058 s / img per device, on 1 devices)
[06/09 08:30:12] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.056587 s / img per device, on 1 devices)
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Saving results to ./output/inference/acheta1_test/coco_instances_results.json
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Evaluating predictions with unofficial COCO API...
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *bbox*
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.07 seconds.
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.02 seconds.
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.549 | 1.076  | 0.526  | 0.000 | 0.722 |  nan  |
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Per-category bbox AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.401 | juvenile     | 0.000 | damaged_adult_male | 0.327 |
| damaged_adult_female | 0.008 | adult_female | 0.958 | cannibalism        | 0.017 |
| egg_laying_female    | 0.024 | adult_male   | 2.657 |                    |       |
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *segm*
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.11 seconds.
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 08:30:13] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.02 seconds.
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.396 | 0.856  | 0.313  | 0.000 | 0.432 |  nan  |
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 08:30:13] d2.evaluation.coco_evaluation INFO: Per-category segm AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.408 | juvenile     | 0.000 | damaged_adult_male | 0.371 |
| damaged_adult_female | 0.014 | adult_female | 0.583 | cannibalism        | 0.004 |
| egg_laying_female    | 0.016 | adult_male   | 1.769 |                    |       |
[06/09 08:30:13] detectron2 INFO: Evaluation results for acheta1_test in csv format:
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: Task: bbox
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: 0.5489,1.0765,0.5263,0.0000,0.7222,nan
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: Task: segm
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 08:30:13] d2.evaluation.testing INFO: copypaste: 0.3955,0.8558,0.3125,0.0000,0.4317,nan
[06/09 08:40:55] detectron2 INFO: Rank of current process: 0. World size: 1
[06/09 08:40:55] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, May  3 2021, 02:48:31) [GCC 7.5.0]
numpy                   1.19.5
detectron2              0.4 @/usr/local/lib/python3.7/dist-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.1
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.1+cu101 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   Tesla P100-PCIE-16GB (arch=6.0)
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.9.1+cu101 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.3.post20210317
cv2                     4.1.2
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/09 08:40:55] detectron2 INFO: Command line arguments: Namespace(config_file='/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl', 'DATASETS.TRAIN', "('acheta1_train',)", 'DATASETS.TEST', "('acheta1_test',)", 'DATALOADER.NUM_WORKERS', '2', 'SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.00125', 'SOLVER.MAX_ITER', '3500', 'SEED', '33', 'MODEL.ROI_HEADS.NUM_CLASSES', '8'], resume=False)
[06/09 08:40:55] detectron2 INFO: Contents of args.config_file=/usr/local/lib/python3.7/dist-packages/detectron2/model_zoo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[06/09 08:40:55] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('acheta1_test',)
  TRAIN: ('acheta1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 8
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
OUTPUT_DIR: ./output
SEED: 33
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.00125
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3500
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/09 08:40:55] detectron2 INFO: Full config saved to ./output/config.yaml
[06/09 08:41:09] detectron2 INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=9, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=32, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/09 08:41:09] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[06/09 08:41:09] fvcore.common.checkpoint INFO: Loading checkpoint from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x/137260431/model_final_a54504.pkl
[06/09 08:41:09] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (9, 1024) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (9,) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (32, 1024) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (32,) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (8, 256, 1, 1) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint WARNING: Skip loading parameter 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (8,) in the model! You might want to double check if this is expected.
[06/09 08:41:09] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.mask_head.predictor.{bias, weight}[0m
[06/09 08:41:10] d2.data.datasets.coco INFO: Loaded 2500 images in COCO format from train_info/coco_instances.json
[06/09 08:41:10] d2.data.build INFO: Removed 0 images with no usable annotations. 2500 images left.
[06/09 08:41:10] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/09 08:41:10] d2.data.build INFO: Using training sampler TrainingSampler
[06/09 08:41:10] d2.data.common INFO: Serializing 2500 elements to byte tensors and concatenating them all ...
[06/09 08:41:10] d2.data.common INFO: Serialized dataset takes 16.56 MiB
[06/09 08:41:10] detectron2 INFO: Starting training from iteration 0
[06/09 08:41:16] d2.utils.events INFO:  iter: 20  total_loss: 3.585  loss_cls: 2.271  loss_box_reg: 0.4814  loss_mask: 0.6921  loss_rpn_cls: 0.116  loss_rpn_loc: 0.02003  lr: 2.4976e-05  max_mem: 2570M
[06/09 08:41:21] d2.utils.events INFO:  eta: 0:15:52  iter: 40  total_loss: 2.811  loss_cls: 1.559  loss_box_reg: 0.4616  loss_mask: 0.6884  loss_rpn_cls: 0.0711  loss_rpn_loc: 0.02161  lr: 4.9951e-05  max_mem: 2570M
[06/09 08:41:27] d2.utils.events INFO:  eta: 0:16:06  iter: 60  total_loss: 2.113  loss_cls: 0.805  loss_box_reg: 0.5695  loss_mask: 0.6769  loss_rpn_cls: 0.05121  loss_rpn_loc: 0.0255  lr: 7.4926e-05  max_mem: 2570M
[06/09 08:41:33] d2.utils.events INFO:  eta: 0:16:27  iter: 80  total_loss: 1.852  loss_cls: 0.6015  loss_box_reg: 0.546  loss_mask: 0.6655  loss_rpn_cls: 0.02313  loss_rpn_loc: 0.01867  lr: 9.9901e-05  max_mem: 2570M
[06/09 08:41:39] d2.utils.events INFO:  eta: 0:16:11  iter: 100  total_loss: 1.821  loss_cls: 0.5783  loss_box_reg: 0.5665  loss_mask: 0.6425  loss_rpn_cls: 0.01499  loss_rpn_loc: 0.02132  lr: 0.00012488  max_mem: 2570M
[06/09 08:41:44] d2.utils.events INFO:  eta: 0:16:06  iter: 120  total_loss: 1.81  loss_cls: 0.5772  loss_box_reg: 0.5772  loss_mask: 0.6122  loss_rpn_cls: 0.01655  loss_rpn_loc: 0.0238  lr: 0.00014985  max_mem: 2570M
[06/09 08:41:50] d2.utils.events INFO:  eta: 0:15:57  iter: 140  total_loss: 1.832  loss_cls: 0.5903  loss_box_reg: 0.6205  loss_mask: 0.5672  loss_rpn_cls: 0.01066  loss_rpn_loc: 0.02085  lr: 0.00017483  max_mem: 2570M
[06/09 08:41:56] d2.utils.events INFO:  eta: 0:16:25  iter: 160  total_loss: 1.868  loss_cls: 0.6173  loss_box_reg: 0.68  loss_mask: 0.5114  loss_rpn_cls: 0.01157  loss_rpn_loc: 0.02106  lr: 0.0001998  max_mem: 2570M
[06/09 08:42:02] d2.utils.events INFO:  eta: 0:16:35  iter: 180  total_loss: 1.819  loss_cls: 0.6213  loss_box_reg: 0.7269  loss_mask: 0.4508  loss_rpn_cls: 0.01007  loss_rpn_loc: 0.01993  lr: 0.00022478  max_mem: 2570M
[06/09 08:42:08] d2.utils.events INFO:  eta: 0:17:00  iter: 200  total_loss: 1.593  loss_cls: 0.5666  loss_box_reg: 0.6346  loss_mask: 0.3825  loss_rpn_cls: 0.004039  loss_rpn_loc: 0.02007  lr: 0.00024975  max_mem: 2570M
[06/09 08:42:14] d2.utils.events INFO:  eta: 0:16:49  iter: 220  total_loss: 1.779  loss_cls: 0.6479  loss_box_reg: 0.7587  loss_mask: 0.3292  loss_rpn_cls: 0.007964  loss_rpn_loc: 0.02307  lr: 0.00027473  max_mem: 2570M
[06/09 08:42:20] d2.utils.events INFO:  eta: 0:16:23  iter: 240  total_loss: 1.661  loss_cls: 0.6027  loss_box_reg: 0.7258  loss_mask: 0.3035  loss_rpn_cls: 0.004616  loss_rpn_loc: 0.02205  lr: 0.0002997  max_mem: 2570M
[06/09 08:42:26] d2.utils.events INFO:  eta: 0:15:54  iter: 260  total_loss: 1.496  loss_cls: 0.556  loss_box_reg: 0.6521  loss_mask: 0.2865  loss_rpn_cls: 0.005635  loss_rpn_loc: 0.02038  lr: 0.00032468  max_mem: 2570M
[06/09 08:42:32] d2.utils.events INFO:  eta: 0:16:16  iter: 280  total_loss: 1.447  loss_cls: 0.5298  loss_box_reg: 0.6016  loss_mask: 0.2595  loss_rpn_cls: 0.005064  loss_rpn_loc: 0.01729  lr: 0.00034965  max_mem: 2570M
[06/09 08:42:38] d2.utils.events INFO:  eta: 0:15:39  iter: 300  total_loss: 1.186  loss_cls: 0.4495  loss_box_reg: 0.4489  loss_mask: 0.2622  loss_rpn_cls: 0.005372  loss_rpn_loc: 0.01465  lr: 0.00037463  max_mem: 2570M
[06/09 08:42:44] d2.utils.events INFO:  eta: 0:16:19  iter: 320  total_loss: 1.35  loss_cls: 0.569  loss_box_reg: 0.5208  loss_mask: 0.2681  loss_rpn_cls: 0.003566  loss_rpn_loc: 0.01998  lr: 0.0003996  max_mem: 2570M
[06/09 08:42:50] d2.utils.events INFO:  eta: 0:16:10  iter: 340  total_loss: 1.314  loss_cls: 0.567  loss_box_reg: 0.462  loss_mask: 0.2715  loss_rpn_cls: 0.004227  loss_rpn_loc: 0.01867  lr: 0.00042458  max_mem: 2570M
[06/09 08:42:56] d2.utils.events INFO:  eta: 0:15:43  iter: 360  total_loss: 1.135  loss_cls: 0.5168  loss_box_reg: 0.3598  loss_mask: 0.2586  loss_rpn_cls: 0.003652  loss_rpn_loc: 0.01907  lr: 0.00044955  max_mem: 2570M
[06/09 08:43:03] d2.utils.events INFO:  eta: 0:16:04  iter: 380  total_loss: 1.093  loss_cls: 0.4808  loss_box_reg: 0.3335  loss_mask: 0.2436  loss_rpn_cls: 0.002104  loss_rpn_loc: 0.01886  lr: 0.00047453  max_mem: 2570M
[06/09 08:43:09] d2.utils.events INFO:  eta: 0:15:30  iter: 400  total_loss: 1.124  loss_cls: 0.505  loss_box_reg: 0.3338  loss_mask: 0.238  loss_rpn_cls: 0.001035  loss_rpn_loc: 0.01719  lr: 0.0004995  max_mem: 2570M
[06/09 08:43:15] d2.utils.events INFO:  eta: 0:15:17  iter: 420  total_loss: 1.008  loss_cls: 0.4358  loss_box_reg: 0.3074  loss_mask: 0.2353  loss_rpn_cls: 0.003501  loss_rpn_loc: 0.0173  lr: 0.00052448  max_mem: 2570M
[06/09 08:43:21] d2.utils.events INFO:  eta: 0:15:12  iter: 440  total_loss: 0.9514  loss_cls: 0.4353  loss_box_reg: 0.2912  loss_mask: 0.238  loss_rpn_cls: 0.001713  loss_rpn_loc: 0.01353  lr: 0.00054945  max_mem: 2570M
[06/09 08:43:27] d2.utils.events INFO:  eta: 0:15:08  iter: 460  total_loss: 1.066  loss_cls: 0.4722  loss_box_reg: 0.346  loss_mask: 0.2311  loss_rpn_cls: 0.001222  loss_rpn_loc: 0.01533  lr: 0.00057443  max_mem: 2570M
[06/09 08:43:32] d2.utils.events INFO:  eta: 0:14:59  iter: 480  total_loss: 0.9898  loss_cls: 0.4262  loss_box_reg: 0.3211  loss_mask: 0.219  loss_rpn_cls: 0.00222  loss_rpn_loc: 0.0183  lr: 0.0005994  max_mem: 2570M
[06/09 08:43:38] d2.utils.events INFO:  eta: 0:14:56  iter: 500  total_loss: 1.008  loss_cls: 0.3979  loss_box_reg: 0.2935  loss_mask: 0.2286  loss_rpn_cls: 0.0044  loss_rpn_loc: 0.01691  lr: 0.00062438  max_mem: 2570M
[06/09 08:43:44] d2.utils.events INFO:  eta: 0:14:38  iter: 520  total_loss: 0.8466  loss_cls: 0.3378  loss_box_reg: 0.2371  loss_mask: 0.2239  loss_rpn_cls: 0.0007255  loss_rpn_loc: 0.01004  lr: 0.00064935  max_mem: 2570M
[06/09 08:43:50] d2.utils.events INFO:  eta: 0:15:01  iter: 540  total_loss: 1.016  loss_cls: 0.4307  loss_box_reg: 0.3276  loss_mask: 0.2189  loss_rpn_cls: 0.001824  loss_rpn_loc: 0.01712  lr: 0.00067433  max_mem: 2570M
[06/09 08:43:56] d2.utils.events INFO:  eta: 0:14:29  iter: 560  total_loss: 0.9421  loss_cls: 0.3966  loss_box_reg: 0.3161  loss_mask: 0.2291  loss_rpn_cls: 0.001411  loss_rpn_loc: 0.01636  lr: 0.0006993  max_mem: 2570M
[06/09 08:44:03] d2.utils.events INFO:  eta: 0:14:53  iter: 580  total_loss: 1.032  loss_cls: 0.442  loss_box_reg: 0.3255  loss_mask: 0.229  loss_rpn_cls: 0.002119  loss_rpn_loc: 0.01806  lr: 0.00072428  max_mem: 2570M
[06/09 08:44:09] d2.utils.events INFO:  eta: 0:14:28  iter: 600  total_loss: 0.8826  loss_cls: 0.3553  loss_box_reg: 0.2983  loss_mask: 0.211  loss_rpn_cls: 0.003061  loss_rpn_loc: 0.01394  lr: 0.00074925  max_mem: 2570M
[06/09 08:44:15] d2.utils.events INFO:  eta: 0:14:41  iter: 620  total_loss: 0.9914  loss_cls: 0.4289  loss_box_reg: 0.3244  loss_mask: 0.2054  loss_rpn_cls: 0.001202  loss_rpn_loc: 0.0184  lr: 0.00077423  max_mem: 2570M
[06/09 08:44:21] d2.utils.events INFO:  eta: 0:14:01  iter: 640  total_loss: 0.8008  loss_cls: 0.3526  loss_box_reg: 0.2547  loss_mask: 0.1973  loss_rpn_cls: 0.0005345  loss_rpn_loc: 0.01182  lr: 0.0007992  max_mem: 2570M
[06/09 08:44:27] d2.utils.events INFO:  eta: 0:14:12  iter: 660  total_loss: 0.9363  loss_cls: 0.3945  loss_box_reg: 0.3023  loss_mask: 0.2043  loss_rpn_cls: 0.001571  loss_rpn_loc: 0.01457  lr: 0.00082418  max_mem: 2570M
[06/09 08:44:32] d2.utils.events INFO:  eta: 0:13:52  iter: 680  total_loss: 0.7403  loss_cls: 0.3069  loss_box_reg: 0.2463  loss_mask: 0.2148  loss_rpn_cls: 0.001573  loss_rpn_loc: 0.01405  lr: 0.00084915  max_mem: 2570M
[06/09 08:44:38] d2.utils.events INFO:  eta: 0:13:28  iter: 700  total_loss: 0.748  loss_cls: 0.3063  loss_box_reg: 0.2272  loss_mask: 0.2023  loss_rpn_cls: 0.0006587  loss_rpn_loc: 0.01088  lr: 0.00087413  max_mem: 2570M
[06/09 08:44:44] d2.utils.events INFO:  eta: 0:14:07  iter: 720  total_loss: 0.8701  loss_cls: 0.3686  loss_box_reg: 0.2703  loss_mask: 0.2058  loss_rpn_cls: 0.0008488  loss_rpn_loc: 0.01559  lr: 0.0008991  max_mem: 2570M
[06/09 08:44:50] d2.utils.events INFO:  eta: 0:13:47  iter: 740  total_loss: 0.8709  loss_cls: 0.3374  loss_box_reg: 0.2586  loss_mask: 0.22  loss_rpn_cls: 0.0007277  loss_rpn_loc: 0.01472  lr: 0.00092408  max_mem: 2570M
[06/09 08:44:56] d2.utils.events INFO:  eta: 0:13:42  iter: 760  total_loss: 0.856  loss_cls: 0.3581  loss_box_reg: 0.2591  loss_mask: 0.2056  loss_rpn_cls: 0.0008389  loss_rpn_loc: 0.01577  lr: 0.00094905  max_mem: 2570M
[06/09 08:45:02] d2.utils.events INFO:  eta: 0:13:16  iter: 780  total_loss: 0.7936  loss_cls: 0.3051  loss_box_reg: 0.2588  loss_mask: 0.2082  loss_rpn_cls: 0.0004602  loss_rpn_loc: 0.0149  lr: 0.00097403  max_mem: 2570M
[06/09 08:45:08] d2.utils.events INFO:  eta: 0:13:51  iter: 800  total_loss: 0.8333  loss_cls: 0.3348  loss_box_reg: 0.2772  loss_mask: 0.1991  loss_rpn_cls: 0.001456  loss_rpn_loc: 0.01777  lr: 0.000999  max_mem: 2570M
[06/09 08:45:14] d2.utils.events INFO:  eta: 0:13:21  iter: 820  total_loss: 0.8955  loss_cls: 0.3755  loss_box_reg: 0.2674  loss_mask: 0.1932  loss_rpn_cls: 0.001914  loss_rpn_loc: 0.01808  lr: 0.001024  max_mem: 2570M
[06/09 08:45:21] d2.utils.events INFO:  eta: 0:13:47  iter: 840  total_loss: 0.8742  loss_cls: 0.3579  loss_box_reg: 0.3029  loss_mask: 0.1919  loss_rpn_cls: 0.001131  loss_rpn_loc: 0.01556  lr: 0.001049  max_mem: 2570M
[06/09 08:45:27] d2.utils.events INFO:  eta: 0:13:13  iter: 860  total_loss: 0.8026  loss_cls: 0.3227  loss_box_reg: 0.2698  loss_mask: 0.1989  loss_rpn_cls: 0.0007319  loss_rpn_loc: 0.01464  lr: 0.0010739  max_mem: 2570M
[06/09 08:45:32] d2.utils.events INFO:  eta: 0:12:58  iter: 880  total_loss: 0.7079  loss_cls: 0.277  loss_box_reg: 0.2224  loss_mask: 0.2011  loss_rpn_cls: 0.0006381  loss_rpn_loc: 0.01318  lr: 0.0010989  max_mem: 2570M
[06/09 08:45:39] d2.utils.events INFO:  eta: 0:13:18  iter: 900  total_loss: 0.8427  loss_cls: 0.364  loss_box_reg: 0.2821  loss_mask: 0.201  loss_rpn_cls: 0.001002  loss_rpn_loc: 0.01489  lr: 0.0011239  max_mem: 2570M
[06/09 08:45:45] d2.utils.events INFO:  eta: 0:12:55  iter: 920  total_loss: 0.7145  loss_cls: 0.281  loss_box_reg: 0.2451  loss_mask: 0.1941  loss_rpn_cls: 0.0009792  loss_rpn_loc: 0.01461  lr: 0.0011489  max_mem: 2570M
[06/09 08:45:51] d2.utils.events INFO:  eta: 0:12:51  iter: 940  total_loss: 0.7917  loss_cls: 0.3099  loss_box_reg: 0.2716  loss_mask: 0.1929  loss_rpn_cls: 0.0005605  loss_rpn_loc: 0.01572  lr: 0.0011738  max_mem: 2570M
[06/09 08:45:57] d2.utils.events INFO:  eta: 0:12:36  iter: 960  total_loss: 0.6709  loss_cls: 0.2513  loss_box_reg: 0.2407  loss_mask: 0.1697  loss_rpn_cls: 0.0007122  loss_rpn_loc: 0.01364  lr: 0.0011988  max_mem: 2570M
[06/09 08:46:03] d2.utils.events INFO:  eta: 0:12:27  iter: 980  total_loss: 0.7077  loss_cls: 0.287  loss_box_reg: 0.2475  loss_mask: 0.1862  loss_rpn_cls: 0.002168  loss_rpn_loc: 0.01519  lr: 0.0012238  max_mem: 2570M
[06/09 08:46:09] d2.utils.events INFO:  eta: 0:12:30  iter: 1000  total_loss: 0.6927  loss_cls: 0.2398  loss_box_reg: 0.2633  loss_mask: 0.1781  loss_rpn_cls: 0.001338  loss_rpn_loc: 0.015  lr: 0.0012488  max_mem: 2570M
[06/09 08:46:15] d2.utils.events INFO:  eta: 0:12:27  iter: 1020  total_loss: 0.7071  loss_cls: 0.2362  loss_box_reg: 0.2374  loss_mask: 0.1813  loss_rpn_cls: 0.001597  loss_rpn_loc: 0.01344  lr: 0.00125  max_mem: 2570M
[06/09 08:46:21] d2.utils.events INFO:  eta: 0:12:09  iter: 1040  total_loss: 0.7465  loss_cls: 0.2746  loss_box_reg: 0.262  loss_mask: 0.1796  loss_rpn_cls: 0.0009844  loss_rpn_loc: 0.01383  lr: 0.00125  max_mem: 2570M
[06/09 08:46:27] d2.utils.events INFO:  eta: 0:12:12  iter: 1060  total_loss: 0.7893  loss_cls: 0.314  loss_box_reg: 0.2675  loss_mask: 0.174  loss_rpn_cls: 0.002726  loss_rpn_loc: 0.01445  lr: 0.00125  max_mem: 2570M
[06/09 08:46:32] d2.utils.events INFO:  eta: 0:11:17  iter: 1080  total_loss: 0.6288  loss_cls: 0.2362  loss_box_reg: 0.2264  loss_mask: 0.1769  loss_rpn_cls: 0.0005084  loss_rpn_loc: 0.0112  lr: 0.00125  max_mem: 2570M
[06/09 08:46:38] d2.utils.events INFO:  eta: 0:11:54  iter: 1100  total_loss: 0.5924  loss_cls: 0.2139  loss_box_reg: 0.204  loss_mask: 0.1673  loss_rpn_cls: 0.001063  loss_rpn_loc: 0.01351  lr: 0.00125  max_mem: 2570M
[06/09 08:46:44] d2.utils.events INFO:  eta: 0:11:53  iter: 1120  total_loss: 0.6942  loss_cls: 0.2186  loss_box_reg: 0.2817  loss_mask: 0.1859  loss_rpn_cls: 0.001291  loss_rpn_loc: 0.01598  lr: 0.00125  max_mem: 2570M
[06/09 08:46:50] d2.utils.events INFO:  eta: 0:11:53  iter: 1140  total_loss: 0.7317  loss_cls: 0.2516  loss_box_reg: 0.2601  loss_mask: 0.182  loss_rpn_cls: 0.001566  loss_rpn_loc: 0.01328  lr: 0.00125  max_mem: 2570M
[06/09 08:46:56] d2.utils.events INFO:  eta: 0:11:41  iter: 1160  total_loss: 0.7713  loss_cls: 0.2825  loss_box_reg: 0.2858  loss_mask: 0.1853  loss_rpn_cls: 0.001941  loss_rpn_loc: 0.01627  lr: 0.00125  max_mem: 2570M
[06/09 08:47:02] d2.utils.events INFO:  eta: 0:11:45  iter: 1180  total_loss: 0.7776  loss_cls: 0.2948  loss_box_reg: 0.2752  loss_mask: 0.1877  loss_rpn_cls: 0.0009995  loss_rpn_loc: 0.01544  lr: 0.00125  max_mem: 2570M
[06/09 08:47:08] d2.utils.events INFO:  eta: 0:11:22  iter: 1200  total_loss: 0.6357  loss_cls: 0.2453  loss_box_reg: 0.2185  loss_mask: 0.1722  loss_rpn_cls: 0.0004152  loss_rpn_loc: 0.01158  lr: 0.00125  max_mem: 2570M
[06/09 08:47:14] d2.utils.events INFO:  eta: 0:11:37  iter: 1220  total_loss: 0.6807  loss_cls: 0.218  loss_box_reg: 0.2643  loss_mask: 0.1798  loss_rpn_cls: 0.001047  loss_rpn_loc: 0.01452  lr: 0.00125  max_mem: 2570M
[06/09 08:47:20] d2.utils.events INFO:  eta: 0:11:37  iter: 1240  total_loss: 0.6432  loss_cls: 0.2025  loss_box_reg: 0.2535  loss_mask: 0.1765  loss_rpn_cls: 0.0008563  loss_rpn_loc: 0.01542  lr: 0.00125  max_mem: 2570M
[06/09 08:47:27] d2.utils.events INFO:  eta: 0:11:44  iter: 1260  total_loss: 0.6926  loss_cls: 0.2166  loss_box_reg: 0.2507  loss_mask: 0.1876  loss_rpn_cls: 0.001512  loss_rpn_loc: 0.01781  lr: 0.00125  max_mem: 2570M
[06/09 08:47:33] d2.utils.events INFO:  eta: 0:11:17  iter: 1280  total_loss: 0.6095  loss_cls: 0.1915  loss_box_reg: 0.2096  loss_mask: 0.1727  loss_rpn_cls: 0.000575  loss_rpn_loc: 0.0135  lr: 0.00125  max_mem: 2570M
[06/09 08:47:39] d2.utils.events INFO:  eta: 0:11:08  iter: 1300  total_loss: 0.68  loss_cls: 0.209  loss_box_reg: 0.2706  loss_mask: 0.1794  loss_rpn_cls: 0.001131  loss_rpn_loc: 0.01585  lr: 0.00125  max_mem: 2570M
[06/09 08:47:45] d2.utils.events INFO:  eta: 0:10:58  iter: 1320  total_loss: 0.6683  loss_cls: 0.2148  loss_box_reg: 0.2405  loss_mask: 0.1662  loss_rpn_cls: 0.0005249  loss_rpn_loc: 0.01144  lr: 0.00125  max_mem: 2570M
[06/09 08:47:51] d2.utils.events INFO:  eta: 0:10:41  iter: 1340  total_loss: 0.632  loss_cls: 0.2295  loss_box_reg: 0.233  loss_mask: 0.1726  loss_rpn_cls: 0.0005485  loss_rpn_loc: 0.01166  lr: 0.00125  max_mem: 2570M
[06/09 08:47:57] d2.utils.events INFO:  eta: 0:10:50  iter: 1360  total_loss: 0.6526  loss_cls: 0.1913  loss_box_reg: 0.2274  loss_mask: 0.1718  loss_rpn_cls: 0.0006658  loss_rpn_loc: 0.01333  lr: 0.00125  max_mem: 2570M
[06/09 08:48:03] d2.utils.events INFO:  eta: 0:10:30  iter: 1380  total_loss: 0.7134  loss_cls: 0.2252  loss_box_reg: 0.2686  loss_mask: 0.1696  loss_rpn_cls: 0.00105  loss_rpn_loc: 0.01547  lr: 0.00125  max_mem: 2570M
[06/09 08:48:09] d2.utils.events INFO:  eta: 0:10:20  iter: 1400  total_loss: 0.5547  loss_cls: 0.1633  loss_box_reg: 0.2141  loss_mask: 0.1666  loss_rpn_cls: 0.0005268  loss_rpn_loc: 0.01352  lr: 0.00125  max_mem: 2570M
[06/09 08:48:15] d2.utils.events INFO:  eta: 0:10:29  iter: 1420  total_loss: 0.5476  loss_cls: 0.1419  loss_box_reg: 0.2324  loss_mask: 0.1636  loss_rpn_cls: 0.0008429  loss_rpn_loc: 0.01159  lr: 0.00125  max_mem: 2570M
[06/09 08:48:21] d2.utils.events INFO:  eta: 0:10:40  iter: 1440  total_loss: 0.6131  loss_cls: 0.1866  loss_box_reg: 0.2237  loss_mask: 0.1626  loss_rpn_cls: 0.000714  loss_rpn_loc: 0.01259  lr: 0.00125  max_mem: 2570M
[06/09 08:48:27] d2.utils.events INFO:  eta: 0:10:24  iter: 1460  total_loss: 0.6195  loss_cls: 0.1892  loss_box_reg: 0.2527  loss_mask: 0.1718  loss_rpn_cls: 0.0007172  loss_rpn_loc: 0.01414  lr: 0.00125  max_mem: 2570M
[06/09 08:48:33] d2.utils.events INFO:  eta: 0:10:20  iter: 1480  total_loss: 0.6249  loss_cls: 0.2035  loss_box_reg: 0.2331  loss_mask: 0.1698  loss_rpn_cls: 0.00126  loss_rpn_loc: 0.01458  lr: 0.00125  max_mem: 2570M
[06/09 08:48:39] d2.utils.events INFO:  eta: 0:09:58  iter: 1500  total_loss: 0.5738  loss_cls: 0.162  loss_box_reg: 0.2153  loss_mask: 0.1771  loss_rpn_cls: 0.001228  loss_rpn_loc: 0.01221  lr: 0.00125  max_mem: 2570M
[06/09 08:48:46] d2.utils.events INFO:  eta: 0:10:05  iter: 1520  total_loss: 0.685  loss_cls: 0.198  loss_box_reg: 0.2376  loss_mask: 0.1765  loss_rpn_cls: 0.0007291  loss_rpn_loc: 0.01432  lr: 0.00125  max_mem: 2570M
[06/09 08:48:52] d2.utils.events INFO:  eta: 0:10:01  iter: 1540  total_loss: 0.7054  loss_cls: 0.19  loss_box_reg: 0.3008  loss_mask: 0.1677  loss_rpn_cls: 0.0008895  loss_rpn_loc: 0.01641  lr: 0.00125  max_mem: 2570M
[06/09 08:48:58] d2.utils.events INFO:  eta: 0:09:41  iter: 1560  total_loss: 0.4928  loss_cls: 0.128  loss_box_reg: 0.1934  loss_mask: 0.1682  loss_rpn_cls: 0.000914  loss_rpn_loc: 0.01188  lr: 0.00125  max_mem: 2570M
[06/09 08:49:04] d2.utils.events INFO:  eta: 0:09:44  iter: 1580  total_loss: 0.5598  loss_cls: 0.1603  loss_box_reg: 0.2242  loss_mask: 0.1666  loss_rpn_cls: 0.0002716  loss_rpn_loc: 0.01139  lr: 0.00125  max_mem: 2570M
[06/09 08:49:10] d2.utils.events INFO:  eta: 0:09:47  iter: 1600  total_loss: 0.5371  loss_cls: 0.1783  loss_box_reg: 0.1962  loss_mask: 0.1676  loss_rpn_cls: 0.001982  loss_rpn_loc: 0.01382  lr: 0.00125  max_mem: 2570M
[06/09 08:49:16] d2.utils.events INFO:  eta: 0:09:27  iter: 1620  total_loss: 0.6316  loss_cls: 0.2174  loss_box_reg: 0.243  loss_mask: 0.174  loss_rpn_cls: 0.00145  loss_rpn_loc: 0.01395  lr: 0.00125  max_mem: 2570M
[06/09 08:49:22] d2.utils.events INFO:  eta: 0:09:19  iter: 1640  total_loss: 0.5729  loss_cls: 0.1544  loss_box_reg: 0.2188  loss_mask: 0.1694  loss_rpn_cls: 0.0006619  loss_rpn_loc: 0.01482  lr: 0.00125  max_mem: 2570M
[06/09 08:49:28] d2.utils.events INFO:  eta: 0:09:01  iter: 1660  total_loss: 0.5364  loss_cls: 0.1379  loss_box_reg: 0.1933  loss_mask: 0.1607  loss_rpn_cls: 0.0006325  loss_rpn_loc: 0.01017  lr: 0.00125  max_mem: 2570M
[06/09 08:49:34] d2.utils.events INFO:  eta: 0:09:01  iter: 1680  total_loss: 0.57  loss_cls: 0.15  loss_box_reg: 0.2137  loss_mask: 0.1663  loss_rpn_cls: 0.0006019  loss_rpn_loc: 0.01216  lr: 0.00125  max_mem: 2570M
[06/09 08:49:40] d2.utils.events INFO:  eta: 0:09:25  iter: 1700  total_loss: 0.6632  loss_cls: 0.167  loss_box_reg: 0.2531  loss_mask: 0.1919  loss_rpn_cls: 0.0009346  loss_rpn_loc: 0.01592  lr: 0.00125  max_mem: 2570M
[06/09 08:49:46] d2.utils.events INFO:  eta: 0:08:42  iter: 1720  total_loss: 0.4748  loss_cls: 0.1151  loss_box_reg: 0.1808  loss_mask: 0.163  loss_rpn_cls: 0.0006114  loss_rpn_loc: 0.01143  lr: 0.00125  max_mem: 2570M
[06/09 08:49:52] d2.utils.events INFO:  eta: 0:08:42  iter: 1740  total_loss: 0.4916  loss_cls: 0.1407  loss_box_reg: 0.1941  loss_mask: 0.1568  loss_rpn_cls: 0.0004852  loss_rpn_loc: 0.01104  lr: 0.00125  max_mem: 2570M
[06/09 08:49:58] d2.utils.events INFO:  eta: 0:08:49  iter: 1760  total_loss: 0.5658  loss_cls: 0.162  loss_box_reg: 0.218  loss_mask: 0.1689  loss_rpn_cls: 0.001487  loss_rpn_loc: 0.01493  lr: 0.00125  max_mem: 2570M
[06/09 08:50:04] d2.utils.events INFO:  eta: 0:08:39  iter: 1780  total_loss: 0.5459  loss_cls: 0.1532  loss_box_reg: 0.2354  loss_mask: 0.1578  loss_rpn_cls: 0.001156  loss_rpn_loc: 0.01194  lr: 0.00125  max_mem: 2570M
[06/09 08:50:10] d2.utils.events INFO:  eta: 0:08:24  iter: 1800  total_loss: 0.5227  loss_cls: 0.1426  loss_box_reg: 0.1826  loss_mask: 0.1706  loss_rpn_cls: 0.0004438  loss_rpn_loc: 0.01014  lr: 0.00125  max_mem: 2570M
[06/09 08:50:16] d2.utils.events INFO:  eta: 0:08:32  iter: 1820  total_loss: 0.5741  loss_cls: 0.1671  loss_box_reg: 0.2383  loss_mask: 0.1588  loss_rpn_cls: 0.0005914  loss_rpn_loc: 0.01194  lr: 0.00125  max_mem: 2570M
[06/09 08:50:22] d2.utils.events INFO:  eta: 0:08:02  iter: 1840  total_loss: 0.4951  loss_cls: 0.1309  loss_box_reg: 0.1961  loss_mask: 0.1633  loss_rpn_cls: 0.000711  loss_rpn_loc: 0.01149  lr: 0.00125  max_mem: 2570M
[06/09 08:50:28] d2.utils.events INFO:  eta: 0:08:10  iter: 1860  total_loss: 0.66  loss_cls: 0.2101  loss_box_reg: 0.2654  loss_mask: 0.1817  loss_rpn_cls: 0.0008172  loss_rpn_loc: 0.01329  lr: 0.00125  max_mem: 2570M
[06/09 08:50:34] d2.utils.events INFO:  eta: 0:07:58  iter: 1880  total_loss: 0.5142  loss_cls: 0.1645  loss_box_reg: 0.2003  loss_mask: 0.1766  loss_rpn_cls: 0.0005939  loss_rpn_loc: 0.01335  lr: 0.00125  max_mem: 2570M
[06/09 08:50:40] d2.utils.events INFO:  eta: 0:07:47  iter: 1900  total_loss: 0.5047  loss_cls: 0.1225  loss_box_reg: 0.1934  loss_mask: 0.1591  loss_rpn_cls: 0.0002797  loss_rpn_loc: 0.01194  lr: 0.00125  max_mem: 2570M
[06/09 08:50:46] d2.utils.events INFO:  eta: 0:07:57  iter: 1920  total_loss: 0.5611  loss_cls: 0.1591  loss_box_reg: 0.2104  loss_mask: 0.1737  loss_rpn_cls: 0.000585  loss_rpn_loc: 0.01139  lr: 0.00125  max_mem: 2570M
[06/09 08:50:52] d2.utils.events INFO:  eta: 0:07:50  iter: 1940  total_loss: 0.5965  loss_cls: 0.1832  loss_box_reg: 0.2294  loss_mask: 0.1803  loss_rpn_cls: 0.002593  loss_rpn_loc: 0.01345  lr: 0.00125  max_mem: 2570M
[06/09 08:50:58] d2.utils.events INFO:  eta: 0:07:44  iter: 1960  total_loss: 0.5353  loss_cls: 0.1437  loss_box_reg: 0.2157  loss_mask: 0.1608  loss_rpn_cls: 0.001565  loss_rpn_loc: 0.01357  lr: 0.00125  max_mem: 2570M
[06/09 08:51:04] d2.utils.events INFO:  eta: 0:07:38  iter: 1980  total_loss: 0.5619  loss_cls: 0.1726  loss_box_reg: 0.2143  loss_mask: 0.1586  loss_rpn_cls: 0.0005534  loss_rpn_loc: 0.01055  lr: 0.00125  max_mem: 2570M
[06/09 08:51:10] d2.utils.events INFO:  eta: 0:07:26  iter: 2000  total_loss: 0.4859  loss_cls: 0.1279  loss_box_reg: 0.1866  loss_mask: 0.1605  loss_rpn_cls: 0.0003096  loss_rpn_loc: 0.01256  lr: 0.00125  max_mem: 2570M
[06/09 08:51:16] d2.utils.events INFO:  eta: 0:07:24  iter: 2020  total_loss: 0.5064  loss_cls: 0.1359  loss_box_reg: 0.2037  loss_mask: 0.1573  loss_rpn_cls: 0.0004433  loss_rpn_loc: 0.01034  lr: 0.00125  max_mem: 2570M
[06/09 08:51:22] d2.utils.events INFO:  eta: 0:07:19  iter: 2040  total_loss: 0.5273  loss_cls: 0.1497  loss_box_reg: 0.2068  loss_mask: 0.1709  loss_rpn_cls: 0.0005675  loss_rpn_loc: 0.009877  lr: 0.00125  max_mem: 2570M
[06/09 08:51:28] d2.utils.events INFO:  eta: 0:07:22  iter: 2060  total_loss: 0.5106  loss_cls: 0.1389  loss_box_reg: 0.201  loss_mask: 0.157  loss_rpn_cls: 0.000518  loss_rpn_loc: 0.01214  lr: 0.00125  max_mem: 2570M
[06/09 08:51:34] d2.utils.events INFO:  eta: 0:07:13  iter: 2080  total_loss: 0.5571  loss_cls: 0.1313  loss_box_reg: 0.2277  loss_mask: 0.1689  loss_rpn_cls: 0.0008355  loss_rpn_loc: 0.01297  lr: 0.00125  max_mem: 2570M
[06/09 08:51:40] d2.utils.events INFO:  eta: 0:06:58  iter: 2100  total_loss: 0.5906  loss_cls: 0.1784  loss_box_reg: 0.227  loss_mask: 0.1683  loss_rpn_cls: 0.0008566  loss_rpn_loc: 0.01313  lr: 0.00125  max_mem: 2570M
[06/09 08:51:46] d2.utils.events INFO:  eta: 0:06:49  iter: 2120  total_loss: 0.5857  loss_cls: 0.1661  loss_box_reg: 0.2086  loss_mask: 0.1614  loss_rpn_cls: 0.0004546  loss_rpn_loc: 0.01171  lr: 0.00125  max_mem: 2570M
[06/09 08:51:52] d2.utils.events INFO:  eta: 0:06:40  iter: 2140  total_loss: 0.5266  loss_cls: 0.171  loss_box_reg: 0.2003  loss_mask: 0.1729  loss_rpn_cls: 0.0005209  loss_rpn_loc: 0.009783  lr: 0.00125  max_mem: 2570M
[06/09 08:51:58] d2.utils.events INFO:  eta: 0:06:41  iter: 2160  total_loss: 0.5436  loss_cls: 0.1533  loss_box_reg: 0.2262  loss_mask: 0.1682  loss_rpn_cls: 0.0006048  loss_rpn_loc: 0.01304  lr: 0.00125  max_mem: 2570M
[06/09 08:52:04] d2.utils.events INFO:  eta: 0:06:28  iter: 2180  total_loss: 0.6095  loss_cls: 0.1508  loss_box_reg: 0.2411  loss_mask: 0.1673  loss_rpn_cls: 0.0005359  loss_rpn_loc: 0.01491  lr: 0.00125  max_mem: 2570M
[06/09 08:52:10] d2.utils.events INFO:  eta: 0:06:33  iter: 2200  total_loss: 0.5822  loss_cls: 0.1597  loss_box_reg: 0.2264  loss_mask: 0.1625  loss_rpn_cls: 0.001533  loss_rpn_loc: 0.01284  lr: 0.00125  max_mem: 2570M
[06/09 08:52:16] d2.utils.events INFO:  eta: 0:06:19  iter: 2220  total_loss: 0.4869  loss_cls: 0.1326  loss_box_reg: 0.1899  loss_mask: 0.1601  loss_rpn_cls: 0.001078  loss_rpn_loc: 0.01567  lr: 0.00125  max_mem: 2570M
[06/09 08:52:22] d2.utils.events INFO:  eta: 0:06:07  iter: 2240  total_loss: 0.577  loss_cls: 0.1515  loss_box_reg: 0.2249  loss_mask: 0.1586  loss_rpn_cls: 0.001271  loss_rpn_loc: 0.01293  lr: 0.00125  max_mem: 2570M
[06/09 08:52:28] d2.utils.events INFO:  eta: 0:06:05  iter: 2260  total_loss: 0.4533  loss_cls: 0.1195  loss_box_reg: 0.1832  loss_mask: 0.1486  loss_rpn_cls: 0.0005745  loss_rpn_loc: 0.01157  lr: 0.00125  max_mem: 2570M
[06/09 08:52:33] d2.utils.events INFO:  eta: 0:06:00  iter: 2280  total_loss: 0.4514  loss_cls: 0.1003  loss_box_reg: 0.173  loss_mask: 0.1485  loss_rpn_cls: 0.0003432  loss_rpn_loc: 0.008448  lr: 0.00125  max_mem: 2570M
[06/09 08:52:39] d2.utils.events INFO:  eta: 0:05:57  iter: 2300  total_loss: 0.5273  loss_cls: 0.1229  loss_box_reg: 0.2236  loss_mask: 0.1806  loss_rpn_cls: 0.001419  loss_rpn_loc: 0.01165  lr: 0.00125  max_mem: 2570M
[06/09 08:52:45] d2.utils.events INFO:  eta: 0:05:52  iter: 2320  total_loss: 0.6157  loss_cls: 0.1558  loss_box_reg: 0.2459  loss_mask: 0.1761  loss_rpn_cls: 0.001882  loss_rpn_loc: 0.01415  lr: 0.00125  max_mem: 2570M
[06/09 08:52:52] d2.utils.events INFO:  eta: 0:05:58  iter: 2340  total_loss: 0.5557  loss_cls: 0.1329  loss_box_reg: 0.248  loss_mask: 0.1614  loss_rpn_cls: 0.001037  loss_rpn_loc: 0.01179  lr: 0.00125  max_mem: 2570M
[06/09 08:52:58] d2.utils.events INFO:  eta: 0:05:49  iter: 2360  total_loss: 0.6265  loss_cls: 0.1716  loss_box_reg: 0.2692  loss_mask: 0.1801  loss_rpn_cls: 0.001714  loss_rpn_loc: 0.01669  lr: 0.00125  max_mem: 2570M
[06/09 08:53:04] d2.utils.events INFO:  eta: 0:05:38  iter: 2380  total_loss: 0.4697  loss_cls: 0.09912  loss_box_reg: 0.1923  loss_mask: 0.1557  loss_rpn_cls: 0.0004881  loss_rpn_loc: 0.009619  lr: 0.00125  max_mem: 2570M
[06/09 08:53:10] d2.utils.events INFO:  eta: 0:05:31  iter: 2400  total_loss: 0.5333  loss_cls: 0.1377  loss_box_reg: 0.1967  loss_mask: 0.1685  loss_rpn_cls: 0.0007839  loss_rpn_loc: 0.01254  lr: 0.00125  max_mem: 2570M
[06/09 08:53:16] d2.utils.events INFO:  eta: 0:05:25  iter: 2420  total_loss: 0.5365  loss_cls: 0.1246  loss_box_reg: 0.2123  loss_mask: 0.1721  loss_rpn_cls: 0.0006241  loss_rpn_loc: 0.01087  lr: 0.00125  max_mem: 2570M
[06/09 08:53:22] d2.utils.events INFO:  eta: 0:05:15  iter: 2440  total_loss: 0.5228  loss_cls: 0.1252  loss_box_reg: 0.2161  loss_mask: 0.1563  loss_rpn_cls: 0.000738  loss_rpn_loc: 0.009311  lr: 0.00125  max_mem: 2570M
[06/09 08:53:28] d2.utils.events INFO:  eta: 0:05:16  iter: 2460  total_loss: 0.4495  loss_cls: 0.1032  loss_box_reg: 0.1797  loss_mask: 0.1598  loss_rpn_cls: 0.0008974  loss_rpn_loc: 0.0111  lr: 0.00125  max_mem: 2570M
[06/09 08:53:34] d2.utils.events INFO:  eta: 0:05:10  iter: 2480  total_loss: 0.5257  loss_cls: 0.1282  loss_box_reg: 0.2284  loss_mask: 0.151  loss_rpn_cls: 0.0009379  loss_rpn_loc: 0.01271  lr: 0.00125  max_mem: 2570M
[06/09 08:53:40] d2.utils.events INFO:  eta: 0:05:02  iter: 2500  total_loss: 0.5112  loss_cls: 0.135  loss_box_reg: 0.2029  loss_mask: 0.1648  loss_rpn_cls: 0.0005921  loss_rpn_loc: 0.01065  lr: 0.00125  max_mem: 2570M
[06/09 08:53:46] d2.utils.events INFO:  eta: 0:04:42  iter: 2520  total_loss: 0.5074  loss_cls: 0.1292  loss_box_reg: 0.187  loss_mask: 0.1611  loss_rpn_cls: 0.0005009  loss_rpn_loc: 0.009179  lr: 0.00125  max_mem: 2570M
[06/09 08:53:52] d2.utils.events INFO:  eta: 0:04:48  iter: 2540  total_loss: 0.5446  loss_cls: 0.1348  loss_box_reg: 0.2239  loss_mask: 0.1657  loss_rpn_cls: 0.0008753  loss_rpn_loc: 0.01097  lr: 0.00125  max_mem: 2570M
[06/09 08:53:58] d2.utils.events INFO:  eta: 0:04:49  iter: 2560  total_loss: 0.4819  loss_cls: 0.1089  loss_box_reg: 0.1906  loss_mask: 0.167  loss_rpn_cls: 0.0006416  loss_rpn_loc: 0.01286  lr: 0.00125  max_mem: 2570M
[06/09 08:54:04] d2.utils.events INFO:  eta: 0:04:29  iter: 2580  total_loss: 0.4892  loss_cls: 0.1161  loss_box_reg: 0.1962  loss_mask: 0.1604  loss_rpn_cls: 0.0005393  loss_rpn_loc: 0.01016  lr: 0.00125  max_mem: 2570M
[06/09 08:54:10] d2.utils.events INFO:  eta: 0:04:29  iter: 2600  total_loss: 0.5073  loss_cls: 0.1161  loss_box_reg: 0.212  loss_mask: 0.1582  loss_rpn_cls: 0.0005486  loss_rpn_loc: 0.01287  lr: 0.00125  max_mem: 2570M
[06/09 08:54:16] d2.utils.events INFO:  eta: 0:04:30  iter: 2620  total_loss: 0.5335  loss_cls: 0.122  loss_box_reg: 0.2235  loss_mask: 0.1616  loss_rpn_cls: 0.0002713  loss_rpn_loc: 0.01355  lr: 0.00125  max_mem: 2570M
[06/09 08:54:22] d2.utils.events INFO:  eta: 0:04:20  iter: 2640  total_loss: 0.4748  loss_cls: 0.115  loss_box_reg: 0.1925  loss_mask: 0.1461  loss_rpn_cls: 0.0003086  loss_rpn_loc: 0.01232  lr: 0.00125  max_mem: 2570M
[06/09 08:54:28] d2.utils.events INFO:  eta: 0:04:20  iter: 2660  total_loss: 0.4855  loss_cls: 0.1141  loss_box_reg: 0.2009  loss_mask: 0.1548  loss_rpn_cls: 0.0005595  loss_rpn_loc: 0.01318  lr: 0.00125  max_mem: 2570M
[06/09 08:54:34] d2.utils.events INFO:  eta: 0:03:58  iter: 2680  total_loss: 0.5383  loss_cls: 0.1223  loss_box_reg: 0.2422  loss_mask: 0.162  loss_rpn_cls: 0.00064  loss_rpn_loc: 0.01162  lr: 0.00125  max_mem: 2570M
[06/09 08:54:40] d2.utils.events INFO:  eta: 0:03:54  iter: 2700  total_loss: 0.478  loss_cls: 0.1063  loss_box_reg: 0.1897  loss_mask: 0.1615  loss_rpn_cls: 0.0008074  loss_rpn_loc: 0.01059  lr: 0.00125  max_mem: 2570M
[06/09 08:54:46] d2.utils.events INFO:  eta: 0:03:53  iter: 2720  total_loss: 0.4285  loss_cls: 0.08825  loss_box_reg: 0.1691  loss_mask: 0.151  loss_rpn_cls: 0.0007966  loss_rpn_loc: 0.01199  lr: 0.00125  max_mem: 2570M
[06/09 08:54:52] d2.utils.events INFO:  eta: 0:03:51  iter: 2740  total_loss: 0.4745  loss_cls: 0.0989  loss_box_reg: 0.193  loss_mask: 0.1552  loss_rpn_cls: 0.0003508  loss_rpn_loc: 0.01229  lr: 0.00125  max_mem: 2570M
[06/09 08:54:58] d2.utils.events INFO:  eta: 0:03:40  iter: 2760  total_loss: 0.4622  loss_cls: 0.1137  loss_box_reg: 0.1845  loss_mask: 0.1417  loss_rpn_cls: 0.0005885  loss_rpn_loc: 0.0107  lr: 0.00125  max_mem: 2570M
[06/09 08:55:04] d2.utils.events INFO:  eta: 0:03:34  iter: 2780  total_loss: 0.4837  loss_cls: 0.1257  loss_box_reg: 0.2109  loss_mask: 0.1639  loss_rpn_cls: 0.0005714  loss_rpn_loc: 0.01155  lr: 0.00125  max_mem: 2570M
[06/09 08:55:10] d2.utils.events INFO:  eta: 0:03:27  iter: 2800  total_loss: 0.4737  loss_cls: 0.1277  loss_box_reg: 0.1879  loss_mask: 0.1573  loss_rpn_cls: 0.0007106  loss_rpn_loc: 0.01161  lr: 0.00125  max_mem: 2570M
[06/09 08:55:16] d2.utils.events INFO:  eta: 0:03:24  iter: 2820  total_loss: 0.4882  loss_cls: 0.1274  loss_box_reg: 0.207  loss_mask: 0.161  loss_rpn_cls: 0.001612  loss_rpn_loc: 0.01403  lr: 0.00125  max_mem: 2570M
[06/09 08:55:22] d2.utils.events INFO:  eta: 0:03:14  iter: 2840  total_loss: 0.4917  loss_cls: 0.1028  loss_box_reg: 0.2105  loss_mask: 0.1495  loss_rpn_cls: 0.001482  loss_rpn_loc: 0.01058  lr: 0.00125  max_mem: 2570M
[06/09 08:55:28] d2.utils.events INFO:  eta: 0:03:13  iter: 2860  total_loss: 0.4458  loss_cls: 0.09588  loss_box_reg: 0.185  loss_mask: 0.1525  loss_rpn_cls: 0.001124  loss_rpn_loc: 0.01085  lr: 0.00125  max_mem: 2570M
[06/09 08:55:34] d2.utils.events INFO:  eta: 0:03:05  iter: 2880  total_loss: 0.4718  loss_cls: 0.1007  loss_box_reg: 0.1851  loss_mask: 0.1594  loss_rpn_cls: 0.0005813  loss_rpn_loc: 0.01164  lr: 0.00125  max_mem: 2570M
[06/09 08:55:40] d2.utils.events INFO:  eta: 0:03:03  iter: 2900  total_loss: 0.3859  loss_cls: 0.08182  loss_box_reg: 0.1647  loss_mask: 0.1431  loss_rpn_cls: 0.0006115  loss_rpn_loc: 0.01197  lr: 0.00125  max_mem: 2570M
[06/09 08:55:46] d2.utils.events INFO:  eta: 0:02:55  iter: 2920  total_loss: 0.504  loss_cls: 0.1265  loss_box_reg: 0.1941  loss_mask: 0.159  loss_rpn_cls: 0.0008053  loss_rpn_loc: 0.0127  lr: 0.00125  max_mem: 2570M
[06/09 08:55:52] d2.utils.events INFO:  eta: 0:02:50  iter: 2940  total_loss: 0.4895  loss_cls: 0.117  loss_box_reg: 0.181  loss_mask: 0.1514  loss_rpn_cls: 0.0004337  loss_rpn_loc: 0.01401  lr: 0.00125  max_mem: 2570M
[06/09 08:55:58] d2.utils.events INFO:  eta: 0:02:34  iter: 2960  total_loss: 0.4788  loss_cls: 0.1106  loss_box_reg: 0.2041  loss_mask: 0.1564  loss_rpn_cls: 0.0002839  loss_rpn_loc: 0.01243  lr: 0.00125  max_mem: 2570M
[06/09 08:56:04] d2.utils.events INFO:  eta: 0:02:34  iter: 2980  total_loss: 0.4269  loss_cls: 0.09012  loss_box_reg: 0.1667  loss_mask: 0.1424  loss_rpn_cls: 0.0008182  loss_rpn_loc: 0.009299  lr: 0.00125  max_mem: 2570M
[06/09 08:56:10] d2.utils.events INFO:  eta: 0:02:28  iter: 3000  total_loss: 0.4846  loss_cls: 0.1065  loss_box_reg: 0.1894  loss_mask: 0.157  loss_rpn_cls: 0.0004347  loss_rpn_loc: 0.00934  lr: 0.00125  max_mem: 2570M
[06/09 08:56:16] d2.utils.events INFO:  eta: 0:02:28  iter: 3020  total_loss: 0.5554  loss_cls: 0.1573  loss_box_reg: 0.2145  loss_mask: 0.1582  loss_rpn_cls: 0.0007943  loss_rpn_loc: 0.01344  lr: 0.00125  max_mem: 2570M
[06/09 08:56:22] d2.utils.events INFO:  eta: 0:02:15  iter: 3040  total_loss: 0.4896  loss_cls: 0.1233  loss_box_reg: 0.1873  loss_mask: 0.1701  loss_rpn_cls: 0.0004296  loss_rpn_loc: 0.01059  lr: 0.00125  max_mem: 2570M
[06/09 08:56:28] d2.utils.events INFO:  eta: 0:02:11  iter: 3060  total_loss: 0.5012  loss_cls: 0.1207  loss_box_reg: 0.2193  loss_mask: 0.1557  loss_rpn_cls: 0.000526  loss_rpn_loc: 0.01383  lr: 0.00125  max_mem: 2570M
[06/09 08:56:34] d2.utils.events INFO:  eta: 0:02:05  iter: 3080  total_loss: 0.4503  loss_cls: 0.1012  loss_box_reg: 0.1849  loss_mask: 0.1507  loss_rpn_cls: 0.0003872  loss_rpn_loc: 0.009218  lr: 0.00125  max_mem: 2570M
[06/09 08:56:40] d2.utils.events INFO:  eta: 0:01:56  iter: 3100  total_loss: 0.4683  loss_cls: 0.1278  loss_box_reg: 0.1754  loss_mask: 0.1531  loss_rpn_cls: 0.00045  loss_rpn_loc: 0.01175  lr: 0.00125  max_mem: 2570M
[06/09 08:56:46] d2.utils.events INFO:  eta: 0:01:53  iter: 3120  total_loss: 0.5248  loss_cls: 0.1286  loss_box_reg: 0.23  loss_mask: 0.1514  loss_rpn_cls: 0.0004476  loss_rpn_loc: 0.01361  lr: 0.00125  max_mem: 2570M
[06/09 08:56:52] d2.utils.events INFO:  eta: 0:01:47  iter: 3140  total_loss: 0.4006  loss_cls: 0.09577  loss_box_reg: 0.1586  loss_mask: 0.1476  loss_rpn_cls: 0.0003106  loss_rpn_loc: 0.008339  lr: 0.00125  max_mem: 2570M
[06/09 08:56:58] d2.utils.events INFO:  eta: 0:01:45  iter: 3160  total_loss: 0.4967  loss_cls: 0.1239  loss_box_reg: 0.1975  loss_mask: 0.1533  loss_rpn_cls: 0.0003771  loss_rpn_loc: 0.01089  lr: 0.00125  max_mem: 2570M
[06/09 08:57:04] d2.utils.events INFO:  eta: 0:01:39  iter: 3180  total_loss: 0.4427  loss_cls: 0.1079  loss_box_reg: 0.1791  loss_mask: 0.1419  loss_rpn_cls: 0.0006737  loss_rpn_loc: 0.01219  lr: 0.00125  max_mem: 2570M
[06/09 08:57:10] d2.utils.events INFO:  eta: 0:01:32  iter: 3200  total_loss: 0.5401  loss_cls: 0.1386  loss_box_reg: 0.2111  loss_mask: 0.1572  loss_rpn_cls: 0.0009096  loss_rpn_loc: 0.01308  lr: 0.00125  max_mem: 2570M
[06/09 08:57:16] d2.utils.events INFO:  eta: 0:01:23  iter: 3220  total_loss: 0.4738  loss_cls: 0.1167  loss_box_reg: 0.1854  loss_mask: 0.1598  loss_rpn_cls: 0.000574  loss_rpn_loc: 0.01072  lr: 0.00125  max_mem: 2570M
[06/09 08:57:22] d2.utils.events INFO:  eta: 0:01:18  iter: 3240  total_loss: 0.5023  loss_cls: 0.1213  loss_box_reg: 0.2193  loss_mask: 0.1518  loss_rpn_cls: 0.0005834  loss_rpn_loc: 0.01335  lr: 0.00125  max_mem: 2570M
[06/09 08:57:28] d2.utils.events INFO:  eta: 0:01:10  iter: 3260  total_loss: 0.4548  loss_cls: 0.1028  loss_box_reg: 0.2108  loss_mask: 0.1535  loss_rpn_cls: 0.0005066  loss_rpn_loc: 0.01159  lr: 0.00125  max_mem: 2570M
[06/09 08:57:34] d2.utils.events INFO:  eta: 0:01:06  iter: 3280  total_loss: 0.5381  loss_cls: 0.1238  loss_box_reg: 0.2181  loss_mask: 0.1589  loss_rpn_cls: 0.0004494  loss_rpn_loc: 0.01375  lr: 0.00125  max_mem: 2570M
[06/09 08:57:40] d2.utils.events INFO:  eta: 0:00:59  iter: 3300  total_loss: 0.5178  loss_cls: 0.1243  loss_box_reg: 0.2179  loss_mask: 0.1623  loss_rpn_cls: 0.0006822  loss_rpn_loc: 0.01246  lr: 0.00125  max_mem: 2570M
[06/09 08:57:47] d2.utils.events INFO:  eta: 0:00:54  iter: 3320  total_loss: 0.5279  loss_cls: 0.115  loss_box_reg: 0.212  loss_mask: 0.1524  loss_rpn_cls: 0.0006307  loss_rpn_loc: 0.01358  lr: 0.00125  max_mem: 2570M
[06/09 08:57:52] d2.utils.events INFO:  eta: 0:00:47  iter: 3340  total_loss: 0.5245  loss_cls: 0.1206  loss_box_reg: 0.2136  loss_mask: 0.1584  loss_rpn_cls: 0.0007557  loss_rpn_loc: 0.01233  lr: 0.00125  max_mem: 2570M
[06/09 08:57:59] d2.utils.events INFO:  eta: 0:00:42  iter: 3360  total_loss: 0.4661  loss_cls: 0.1076  loss_box_reg: 0.1829  loss_mask: 0.1513  loss_rpn_cls: 0.0004805  loss_rpn_loc: 0.01131  lr: 0.00125  max_mem: 2570M
[06/09 08:58:05] d2.utils.events INFO:  eta: 0:00:35  iter: 3380  total_loss: 0.4905  loss_cls: 0.1102  loss_box_reg: 0.1834  loss_mask: 0.1612  loss_rpn_cls: 0.0002544  loss_rpn_loc: 0.01109  lr: 0.00125  max_mem: 2570M
[06/09 08:58:11] d2.utils.events INFO:  eta: 0:00:29  iter: 3400  total_loss: 0.4116  loss_cls: 0.08544  loss_box_reg: 0.1578  loss_mask: 0.1512  loss_rpn_cls: 0.0003844  loss_rpn_loc: 0.009713  lr: 0.00125  max_mem: 2570M
[06/09 08:58:16] d2.utils.events INFO:  eta: 0:00:23  iter: 3420  total_loss: 0.4825  loss_cls: 0.1291  loss_box_reg: 0.1764  loss_mask: 0.1553  loss_rpn_cls: 0.0007226  loss_rpn_loc: 0.01329  lr: 0.00125  max_mem: 2570M
[06/09 08:58:22] d2.utils.events INFO:  eta: 0:00:17  iter: 3440  total_loss: 0.436  loss_cls: 0.0926  loss_box_reg: 0.1727  loss_mask: 0.1544  loss_rpn_cls: 0.0004603  loss_rpn_loc: 0.01143  lr: 0.00125  max_mem: 2570M
[06/09 08:58:28] d2.utils.events INFO:  eta: 0:00:11  iter: 3460  total_loss: 0.4612  loss_cls: 0.09834  loss_box_reg: 0.1839  loss_mask: 0.1516  loss_rpn_cls: 0.0006088  loss_rpn_loc: 0.01155  lr: 0.00125  max_mem: 2570M
[06/09 08:58:34] d2.utils.events INFO:  eta: 0:00:05  iter: 3480  total_loss: 0.497  loss_cls: 0.1188  loss_box_reg: 0.2099  loss_mask: 0.1514  loss_rpn_cls: 0.0003614  loss_rpn_loc: 0.01102  lr: 0.00125  max_mem: 2570M
[06/09 08:58:40] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_final.pth
[06/09 08:58:42] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_final.pth
[06/09 08:58:43] d2.data.datasets.coco INFO: Loaded 150 images in COCO format from test_info/coco_instances.json
[06/09 08:58:43] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[06/09 08:58:43] d2.data.common INFO: Serializing 150 elements to byte tensors and concatenating them all ...
[06/09 08:58:43] d2.data.common INFO: Serialized dataset takes 0.97 MiB
[06/09 08:58:43] d2.evaluation.evaluator INFO: Start inference on 150 images
[06/09 08:58:44] d2.evaluation.evaluator INFO: Inference done 11/150. 0.0560 s / img. ETA=0:00:09
[06/09 08:58:49] d2.evaluation.evaluator INFO: Inference done 83/150. 0.0568 s / img. ETA=0:00:04
[06/09 08:58:54] d2.evaluation.evaluator INFO: Total inference time: 0:00:10.072013 (0.069462 s / img per device, on 1 devices)
[06/09 08:58:54] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.056718 s / img per device, on 1 devices)
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Saving results to ./output/inference/acheta1_test/coco_instances_results.json
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Evaluating predictions with unofficial COCO API...
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *bbox*
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.08 seconds.
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.03 seconds.
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.549 | 1.176  | 0.339  | 0.000 | 0.683 |  nan  |
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Per-category bbox AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.111 | juvenile     | 0.000 | damaged_adult_male | 1.351 |
| damaged_adult_female | 0.000 | adult_female | 0.988 | cannibalism        | 0.007 |
| egg_laying_female    | 0.029 | adult_male   | 1.906 |                    |       |
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *segm*
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.14 seconds.
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[06/09 08:58:54] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.02 seconds.
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.441 | 0.970  | 0.395  | 0.000 | 0.458 |  nan  |
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[06/09 08:58:54] d2.evaluation.coco_evaluation INFO: Per-category segm AP: 
| category             | AP    | category     | AP    | category           | AP    |
|:---------------------|:------|:-------------|:------|:-------------------|:------|
| moving               | 0.091 | juvenile     | 0.002 | damaged_adult_male | 1.536 |
| damaged_adult_female | 0.000 | adult_female | 0.567 | cannibalism        | 0.003 |
| egg_laying_female    | 0.020 | adult_male   | 1.308 |                    |       |
[06/09 08:58:54] detectron2 INFO: Evaluation results for acheta1_test in csv format:
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: Task: bbox
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: 0.5490,1.1764,0.3389,0.0000,0.6825,nan
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: Task: segm
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[06/09 08:58:54] d2.evaluation.testing INFO: copypaste: 0.4408,0.9701,0.3949,0.0000,0.4584,nan
[06/09 09:11:54] fvcore.common.checkpoint INFO: Loading checkpoint from ./output/model_final.pth
[06/09 09:13:28] fvcore.common.checkpoint INFO: Loading checkpoint from ./output/model_final.pth
